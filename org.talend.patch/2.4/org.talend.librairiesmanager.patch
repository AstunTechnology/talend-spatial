Index: resources/java/routines/GeometryOperation.java
===================================================================
--- resources/java/routines/GeometryOperation.java	(revision 0)
+++ resources/java/routines/GeometryOperation.java	(revision 0)
@@ -0,0 +1,92 @@
+// ============================================================================
+//
+// Copyright (C) 2006-2007 Talend Inc. - www.talend.com
+//
+// This source code is available under agreement available at
+// %InstallDIR%\features\org.talend.rcp.branding.%PRODUCTNAME%\%PRODUCTNAME%license.txt
+//
+// You should have received a copy of the  agreement
+// along with this program; if not, write to Talend SA
+// 9 rue Pages 92150 Suresnes, France
+//   
+// ============================================================================
+package routines;
+
+import org.talend.sdi.geometry.Geometry;
+
+
+
+/**
+ *
+ * @author mcoudert
+ */
+public class GeometryOperation {
+    
+    /** 
+     * GETAREA( ) Returns the area of the specified geometry.
+     * 
+     * {talendTypes} double | Double
+     * 
+     * {Category} GeometryOperation
+     * 
+     * {param} Geometry(null)
+     * 
+     * {example} GETAREA(null)
+     * 
+     */
+    public static Double GETAREA(Geometry geom) {
+        return geom.getArea();
+    }
+
+    
+    /** 
+     * GETLENGTH( ) Returns the length of the specified geometry.
+     * 
+     * {talendTypes} double | Double
+     * 
+     * {Category} GeometryOperation
+     * 
+     * {param} Geometry(null)
+     * 
+     * {example} GETAREA(null)
+     * 
+     */
+    public static Double GETLENGTH(Geometry geom) {
+        return geom.getLength();
+    }
+
+    /** 
+     * GETCENTROID( ) Returns the centroid of the specified geometry.
+     * 
+     * {talendTypes} geometry | Geometry
+     * 
+     * {Category} GeometryOperation
+     * 
+     * {param} Geometry(null)
+     * 
+     * {example} GETCENTROID(null)
+     * 
+     */
+    public static Geometry GETCENTROID(Geometry geom) {
+        return geom.getCentroid();
+    }
+    
+    /** 
+     * INTERSECTION( ) Returns the intersection of the two geometry specified.
+     * 
+     * {talendTypes} geometry | Geometry
+     * 
+     * {Category} GeometryOperation
+     * 
+     * {param} Geometry(null)
+     * 
+     * {param} Geometry(null)
+     * 
+     * {example} INTERSECTION(null)
+     * 
+     */
+    public static Geometry INTERSECTION(Geometry geom, Geometry geom1) {
+        return geom.intersection(geom1);
+    }
+    
+}
Index: resources/java/routines/GeoOperation.java
===================================================================
--- resources/java/routines/GeoOperation.java	(revision 0)
+++ resources/java/routines/GeoOperation.java	(revision 0)
@@ -0,0 +1,223 @@
+// ============================================================================
+//
+// Copyright (C) 2006-2007 Talend Inc. - www.talend.com
+//
+// This source code is available under agreement available at
+// %InstallDIR%\features\org.talend.rcp.branding.%PRODUCTNAME%\%PRODUCTNAME%license.txt
+//
+// You should have received a copy of the  agreement
+// along with this program; if not, write to Talend SA
+// 9 rue Pages 92150 Suresnes, France
+//   
+// ============================================================================
+package routines;
+
+import org.talend.sdi.geometry.Geometry;
+
+/**
+ *
+ * @author mcoudert
+ */
+public class GeoOperation {
+    
+    /** 
+     * INTERSECTS( ) Returns true if this geometry intersects the specified geometry.
+     * 
+     * {talendTypes} boolean | Boolean
+     * 
+     * {Category} GeoOperation
+     * 
+     * {param} Object(null)
+     * 
+     * {param} Object(null)
+     * 
+     * {example} INTERSECTS(null,null)
+     * 
+     */
+    public static boolean INTERSECTS(Geometry geom1, Geometry geom2) {
+        if (geom1.intersects(geom2)==true) {
+            return true;
+        } else {
+            return false;
+        }
+    }
+    
+    /** 
+     * TOUCHES( ) Returns true if this geometry touches the specified geometry.
+     * 
+     * {talendTypes} boolean | Boolean
+     * 
+     * {Category} GeoOperation
+     * 
+     * {param} Geometry(null)
+     * 
+     * {param} Geometry(null)
+     * 
+     * {example} TOUCHES(null,null)
+     * 
+     */
+    public static boolean TOUCHES(Geometry geom1, Geometry geom2) {
+        if (geom1.touches(geom2)==true) {
+            return true;
+        } else {
+            return false;
+        }
+    }
+    
+    /** 
+     * CROSSES( ) Returns true if this geometry crosses the specified geometry.
+     * 
+     * {talendTypes} boolean | Boolean
+     * 
+     * {Category} GeoOperation
+     * 
+     * {param} Geometry(null)
+     * 
+     * {param} Geometry(null)
+     * 
+     * {example} CROSSES(null,null)
+     * 
+     */
+    public static boolean CROSSES(Geometry geom1, Geometry geom2) {
+        if (geom1.crosses(geom2)==true) {
+            return true;
+        } else {
+            return false;
+        }
+    }
+    
+    /** 
+     * CONTAINS( ) Returns true if this Geometry contains the specified Geometry.
+     * 
+     * {talendTypes} boolean | Boolean
+     * 
+     * {Category} GeoOperation
+     * 
+     * {param} Geometry(null)
+     * 
+     * {param} Geometry(null)
+     * 
+     * {example} CONTAINS(null,null)
+     * 
+     */
+    public static boolean CONTAINS(Geometry geom1, Geometry geom2) {
+        if (geom1.contains(geom2)==true) {
+            return true;
+        } else {
+            return false;
+        }
+    }
+    
+    /** 
+     * WITHIN( ) Returns true if this Geometry is within the specified Geometry.
+     * 
+     * {talendTypes} boolean | Boolean
+     * 
+     * {Category} GeoOperation
+     * 
+     * {param} Geometry(null)
+     * 
+     * {param} Geometry(null)
+     * 
+     * {example} WITHIN(null,null)
+     * 
+     */
+    public static boolean WITHIN(Geometry geom1, Geometry geom2) {
+        if (geom1.within(geom2)==true) {
+            return true;
+        } else {
+            return false;
+        }
+    }
+    
+    /** 
+     * COVERS( ) Returns true if this Geometry covers the specified Geometry.
+     * 
+     * {talendTypes} boolean | Boolean
+     * 
+     * {Category} GeoOperation
+     * 
+     * {param} Geometry(null)
+     * 
+     * {param} Geometry(null)
+     * 
+     * {example} COVERS(null,null)
+     * 
+     */
+    public static boolean COVERS(Geometry geom1, Geometry geom2) {
+        if (geom1.covers(geom2)==true) {
+            return true;
+        } else {
+            return false;
+        }
+    }
+    
+    /** 
+     * COVEREDBY( ) Returns true if this Geometry is covered by the specified Geometry.
+     * 
+     * {talendTypes} boolean | Boolean
+     * 
+     * {Category} GeoOperation
+     * 
+     * {param} Geometry(null)
+     * 
+     * {param} Geometry(null)
+     * 
+     * {example} COVEREDBY(null,null)
+     * 
+     */
+    public static boolean COVEREDBY(Geometry geom1, Geometry geom2) {
+        if (geom1.coveredBy(geom2)==true) {
+            return true;
+        } else {
+            return false;
+        }
+    }
+    
+    
+     /** 
+     * DISJOINT( ) Returns true if this Geometry is disjoint to the specified Geometry.
+     * 
+     * {talendTypes} boolean | Boolean
+     * 
+     * {Category} GeoOperation
+     * 
+     * {param} Geometry(null)
+     * 
+     * {param} Geometry(null)
+     * 
+     * {example} DISJOINT(null,null)
+     * 
+     */
+    public static boolean DISJOINT(Geometry geom1, Geometry geom2) {
+        if (geom1.disjoint(geom2)==true) {
+            return true;
+        } else {
+            return false;
+        }
+    }
+    
+    
+     /** 
+     * OVERLAPS( ) Returns true if this Geometry overlaps the specified Geometry.
+     * 
+     * {talendTypes} boolean | Boolean
+     * 
+     * {Category} GeoOperation
+     * 
+     * {param} Geometry(null)
+     * 
+     * {param} Geometry(null)
+     * 
+     * {example} OVERLAPS(null,null)
+     * 
+     */
+    public static boolean OVERLAPS(Geometry geom1, Geometry geom2) {
+        if (geom1.overlaps(geom2)==true) {
+            return true;
+        } else {
+            return false;
+        }
+    }
+  
+}
