Index: org.talend.designer.components.localprovider/components/tPostgresqlInput/tPostgresqlInput_begin.javajet
===================================================================
--- org.talend.designer.components.localprovider/components/tPostgresqlInput/tPostgresqlInput_begin.javajet	(revision 29597)
+++ org.talend.designer.components.localprovider/components/tPostgresqlInput/tPostgresqlInput_begin.javajet	(working copy)
@@ -174,6 +174,13 @@
                                         <%=firstConnName%>.<%=column.getLabel()%> = null;
                                     }                                    
                                     <%
+                                } else if(typeToGenerate.equals("Geometry")) {
+                                	%>
+                                	org.postgis.Geometry o = org.postgis.PGgeometry.geomFromString(rs_<%=cid %>.getObject(<%=currentColNo%>).toString());
+                                	StringBuffer sb = new StringBuffer();
+                                	o.outerWKT(sb, false);
+                                	<%=firstConnName%>.<%=column.getLabel()%> = new Geometry(sb.toString());
+                                	<%
                                 } else {		  
                                     %>
                                     if(rs_<%=cid %>.getObject(<%=currentColNo%>) != null) {
Index: org.talend.designer.components.localprovider/components/tPostgresqlInput/tPostgresqlInput_java.xml
===================================================================
--- org.talend.designer.components.localprovider/components/tPostgresqlInput/tPostgresqlInput_java.xml	(revision 29597)
+++ org.talend.designer.components.localprovider/components/tPostgresqlInput/tPostgresqlInput_java.xml	(working copy)
@@ -16,6 +16,7 @@
 
   <FAMILIES>
     <FAMILY>Databases/PostgreSQL</FAMILY>
+    <FAMILY>Geo/Database</FAMILY>
   </FAMILIES>
 
   <DOCUMENTATION>
@@ -218,6 +219,9 @@
    <CODEGENERATION>
      <IMPORTS>
      	<IMPORT NAME="Driver-Postgres" MODULE="postgresql-8.3-603.jdbc3.jar" REQUIRED="true" />
+     	<IMPORT NAME="Driver-Postgis" MODULE="postgis_1.4.0.jar" REQUIRED="true" />
+     	<IMPORT NAME="org.talend.sdi" MODULE="org.talend.sdi.jar" REQUIRED="true" />
+     	<IMPORT NAME="jts" MODULE="jts-1.9.jar" REQUIRED="true"/>
      </IMPORTS>
    </CODEGENERATION>
 
Index: org.talend.designer.components.localprovider/components/tPostgresqlOutput/tPostgresqlOutput_end.javajet
===================================================================
--- org.talend.designer.components.localprovider/components/tPostgresqlOutput/tPostgresqlOutput_end.javajet	(revision 29597)
+++ org.talend.designer.components.localprovider/components/tPostgresqlOutput/tPostgresqlOutput_end.javajet	(working copy)
@@ -18,6 +18,49 @@
 	
 	String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
 	
+	String dbschema = ElementParameterParser.getValue(node, "__SCHEMA_DB__");
+	
+	String tableName = ElementParameterParser.getValue(node,"__TABLE__");
+	
+	boolean useSpatialOptions = ElementParameterParser.getValue(node,"__USE_SPATIAL_OPTIONS__").equals("true");
+	
+	boolean createSpatialIndex = ElementParameterParser.getValue(node,"__SPATIAL_INDEX__").equals("true");
+	
+	boolean createGeometryColumns = ElementParameterParser.getValue(node,"__GEOMETRY_COLUMNS__").equals("true");
+    
+    if(createGeometryColumns && useSpatialOptions){
+		%>
+		java.sql.Statement stmtCreateGeoColumns_<%=cid%> = conn_<%=cid%>.createStatement();
+		
+		// Delete geometry columns entry if already exists. 
+		String deleteGeometryColumns_<%=cid %> = "DELETE FROM geometry_columns WHERE f_table_name='" + 
+												<%=tableName %> + "' AND f_table_schema='" + <%=dbschema %> +"'";
+		stmtCreateGeoColumns_<%=cid%>.execute(deleteGeometryColumns_<%=cid %>);
+			
+		// Create new entry in geometry columns table	
+        String insertGeometryColumns_<%=cid %> = "INSERT INTO geometry_columns VALUES ('', '"+ <%=dbschema %> +"', '"+ 
+        										<%=tableName %> +"','"+ geometryColumnName_<%=cid %> +
+        										"', "+dimension_<%=cid %>+", "+ SRID_<%=cid %> +", 'GEOMETRY')";
+        stmtCreateGeoColumns_<%=cid%>.execute(insertGeometryColumns_<%=cid %>);
+        
+        stmtCreateGeoColumns_<%=cid%>.close();
+		<%
+	}
+	if(createSpatialIndex && useSpatialOptions){
+		%>
+		java.sql.Statement stmtCreateIndex_<%=cid%> = conn_<%=cid%>.createStatement();
+		// Drop spatial index if exists
+		String dropIndex_<%=cid %> = "DROP INDEX IF EXISTS " +<%=tableName %> +"_geo_index";
+		stmtCreateIndex_<%=cid%>.execute(dropIndex_<%=cid %>);
+		
+		// Create spatial index using GIST on geometry columns
+		String createIndex_<%=cid %> = "CREATE INDEX " + <%=tableName %> +"_geo_index ON "+ <%=tableName %> +
+								 " USING GIST (" + geometryColumnName_<%=cid %> +")";
+        stmtCreateIndex_<%=cid%>.execute(createIndex_<%=cid %>);
+        stmtCreateIndex_<%=cid%>.close();
+		<%
+	}
+    
     if(dataAction.equals("INSERT_OR_UPDATE")) {
         %>
         if(pstmtUpdate_<%=cid%> != null){
Index: org.talend.designer.components.localprovider/components/tPostgresqlOutput/tPostgresqlOutput_messages.properties
===================================================================
--- org.talend.designer.components.localprovider/components/tPostgresqlOutput/tPostgresqlOutput_messages.properties	(revision 29597)
+++ org.talend.designer.components.localprovider/components/tPostgresqlOutput/tPostgresqlOutput_messages.properties	(working copy)
@@ -1,4 +1,4 @@
-#Created by JInto - www.guh-software.de
+²#Created by JInto - www.guh-software.de
 #Fri Sep 07 10:53:13 CST 2007
 ADD_COLS.ITEM.NAME=Name
 ADD_COLS.ITEM.DATATYPE=Data type
@@ -72,7 +72,9 @@
 FIELD_OPTIONS.ITEM.UPDATABLE=Updatable
 FIELD_OPTIONS.ITEM.INSERTABLE=Insertable
 ENABLE_DEBUG_MODE.NAME=Enable debug mode
-
+USE_SPATIAL_OPTIONS.NAME=Use spatial options
+SPATIAL_INDEX.NAME=Create Spatial index
+GEOMETRY_COLUMNS.NAME=Create geometry columns reference
 NB_LINE_UPDATED.NAME=Number Of Updated Lines
 NB_LINE_INSERTED.NAME=Number Of Inserted Lines
 NB_LINE_DELETED.NAME=Number Of Deleted Lines
\ No newline at end of file
Index: org.talend.designer.components.localprovider/components/tPostgresqlOutput/tPostgresqlOutput_begin.javajet
===================================================================
--- org.talend.designer.components.localprovider/components/tPostgresqlOutput/tPostgresqlOutput_begin.javajet	(revision 29597)
+++ org.talend.designer.components.localprovider/components/tPostgresqlOutput/tPostgresqlOutput_begin.javajet	(working copy)
@@ -57,6 +57,12 @@
 	String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
 
 	boolean isEnableDebug = ElementParameterParser.getValue(node,"__ENABLE_DEBUG_MODE__").equals("true");
+	
+	boolean useSpatialOptions = ElementParameterParser.getValue(node,"__USE_SPATIAL_OPTIONS__").equals("true");
+	
+	boolean createSpatialIndex = ElementParameterParser.getValue(node,"__SPATIAL_INDEX__").equals("true");
+	
+	boolean createGeometryColumns = ElementParameterParser.getValue(node,"__GEOMETRY_COLUMNS__").equals("true");
 %>
 
 <%
@@ -276,5 +282,14 @@
         String query_<%=cid%> = null;
         <%
     }
+    if((createGeometryColumns || createSpatialIndex) && useSpatialOptions) {
+    	%>
+    	String geometryColumnName_<%=cid %> = null;
+    	// Initialize SRID
+    	int SRID_<%=cid %> = 0;
+    	int dimension_<%=cid %> = 0; 
+    	boolean firstGeometry_<%=cid %> = true;
+    	<%
+    }
 }
 %>
Index: org.talend.designer.components.localprovider/components/tPostgresqlOutput/tPostgresqlOutput_main.javajet
===================================================================
--- org.talend.designer.components.localprovider/components/tPostgresqlOutput/tPostgresqlOutput_main.javajet	(revision 29597)
+++ org.talend.designer.components.localprovider/components/tPostgresqlOutput/tPostgresqlOutput_main.javajet	(working copy)
@@ -39,6 +39,10 @@
     
     String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
     boolean isEnableDebug = ElementParameterParser.getValue(node,"__ENABLE_DEBUG_MODE__").equals("true");
+    boolean useSpatialOptions = ElementParameterParser.getValue(node,"__USE_SPATIAL_OPTIONS__").equals("true");
+    boolean createSpatialIndex = ElementParameterParser.getValue(node,"__SPATIAL_INDEX__").equals("true");
+    boolean createGeometryColumns = ElementParameterParser.getValue(node,"__GEOMETRY_COLUMNS__").equals("true");
+    
     String incomingConnName = null;
     List<IMetadataColumn> columnList = getColumnList(node);
     
@@ -109,7 +113,39 @@
                         %>
                         query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_")%>;
                         <%
-                    }                    
+                    }
+                    if (typeToGenerate.equals("Geometry")) {
+                        counter++;
+                        if((createGeometryColumns || createSpatialIndex) && useSpatialOptions) {
+                            %>
+                            geometryColumnName_<%=cid %> = "<%=column.getColumn().getLabel() %>";
+                            if (firstGeometry_<%=cid %>) {
+                                 org.opengis.referencing.crs.CoordinateReferenceSystem refSys_<%=cid %> = 
+                                        ((org.talend.sdi.geometry.Geometry) <%=incomingConnName%>.<%=column.getName()%>).getCRS();
+                                 if (refSys_<%=cid %> != null) {
+                                    dimension_<%=cid %> = refSys_<%=cid %>.getCoordinateSystem().getDimension();
+                                    try {
+                                        java.util.Set ident_<%=cid %> = refSys_<%=cid %>.getIdentifiers();
+                                        if ((ident_<%=cid %> == null || ident_<%=cid %>.isEmpty())
+                                            && refSys_<%=cid %> == org.geotools.referencing.crs.DefaultGeographicCRS.WGS84) {
+                                            SRID_<%=cid %> = 4326;
+                                        } else {
+                                            String code_<%=cid %> = ((org.geotools.referencing.NamedIdentifier) ident_<%=cid %>.toArray()[0]).getCode();
+                                            SRID_<%=cid %> = Integer.parseInt(code_<%=cid %>);
+                                        }
+                                    } catch (Exception e) {
+                                        System.out.println("SRID_<%=cid %> could not be determined");
+                                        SRID_<%=cid %> = -1;
+                                    }
+                                 }  else {
+                                    SRID_<%=cid %> = -1;
+                                    dimension_<%=cid %> = 2;
+                                 }
+                                firstGeometry_<%=cid %> = false;
+                            }
+                            <%
+                        }
+                    }               
                     counter++;                        
                 }
             }
@@ -168,7 +204,9 @@
                         %>
                         query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_")%>;
                         <%
-                    }                    
+                    }
+                    if (typeToGenerate.equals("Geometry"))
+                        counterCol++;                   
                     counterCol++;                   
                 }
             }
@@ -183,7 +221,9 @@
                         %>
                         query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_")%>;
                         <%
-                    }                    
+                    }
+                    if (typeToGenerate.equals("Geometry")) 
+                        counterCol++;
                     counterCol++;
                 }
             }
@@ -236,6 +276,8 @@
                     %>
                     <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, columnIndex, incomingConnName, cid, NORMAL_TYPE)%>
                     <%
+                    if (typeToGenerate.equals("Geometry"))
+                        columnIndex++;
                     columnIndex++;
                 }
             }
@@ -265,6 +307,8 @@
                             query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_")%>;
                             <%
                         }                        
+                        if (typeToGenerate.equals("Geometry"))
+                            counterCol++;
                         counterCol++;
                     }
                 }
@@ -279,6 +323,8 @@
                             query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_")%>;
                             <%
                         }                        
+                        if (typeToGenerate.equals("Geometry"))
+                            counterCol++;
                         counterCol++;                   
                     }
                 }
@@ -337,6 +383,8 @@
                             query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, columnInsert, incomingConnName, cid, "query_")%>;
                             <%
                         }                        
+                        if (typeToGenerate.equals("Geometry"))
+                            counterInsert++;
                         counterInsert++;
                     }
                 }
@@ -400,6 +448,8 @@
                         query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, columnUpdate, incomingConnName, cid, "query_")%>;
                         <%
                     }                    
+                    if (typeToGenerate.equals("Geometry"))
+                        counterColUpdate++;
                     counterColUpdate++;
                 }
             }
@@ -415,6 +465,8 @@
                         query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, columnUpdate, incomingConnName, cid, "query_")%>;
                         <%
                     }                    
+                    if (typeToGenerate.equals("Geometry"))
+                        counterColUpdate++;
                     counterColUpdate++;
                 }
             }
@@ -475,6 +527,8 @@
                             query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_")%>;
                             <%
                         }                        
+                        if (typeToGenerate.equals("Geometry"))
+                            counter++;
                         counter++;
                     }
                 }
@@ -536,6 +590,8 @@
                         query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_")%>;
                         <%
                     }                    
+                    if (typeToGenerate.equals("Geometry"))
+                        keyCounter++;
                     keyCounter++;
                 }
             }
@@ -619,4 +675,4 @@
             }
         }
     }
-    %>
\ No newline at end of file
+    %>
Index: org.talend.designer.components.localprovider/components/tPostgresqlOutput/tPostgresqlOutput_java.xml
===================================================================
--- org.talend.designer.components.localprovider/components/tPostgresqlOutput/tPostgresqlOutput_java.xml	(revision 29597)
+++ org.talend.designer.components.localprovider/components/tPostgresqlOutput/tPostgresqlOutput_java.xml	(working copy)
@@ -18,6 +18,7 @@
 
   <FAMILIES>
     <FAMILY>Databases/PostgreSQL</FAMILY>
+    <FAMILY>Geo/Database</FAMILY>
   </FAMILIES>
 
   <DOCUMENTATION>
@@ -195,10 +196,40 @@
       </TABLE>
     </PARAMETER>    
     
+    <PARAMETER
+      NAME="USE_SPATIAL_OPTIONS"
+      FIELD="CHECK"
+      NUM_ROW="9"
+      SHOW_IF="(TABLE_ACTION=='CREATE') or (TABLE_ACTION=='DROP_CREATE') or 
+      		(TABLE_ACTION=='CREATE_IF_NOT_EXISTS') or (TABLE_ACTION=='DROP_IF_EXISTS_AND_CREATE')"
+    >
+      <DEFAULT>false</DEFAULT>
+    </PARAMETER>
+    
+    <PARAMETER
+      NAME="SPATIAL_INDEX"
+      FIELD="CHECK"
+      SHOW_IF="(USE_SPATIAL_OPTIONS == 'true') and ((TABLE_ACTION=='CREATE') or (TABLE_ACTION=='DROP_CREATE') or 
+      		(TABLE_ACTION=='CREATE_IF_NOT_EXISTS') or (TABLE_ACTION=='DROP_IF_EXISTS_AND_CREATE'))"
+      NUM_ROW="9"
+    >
+      <DEFAULT>false</DEFAULT>
+    </PARAMETER>
+    
+    <PARAMETER
+      NAME="GEOMETRY_COLUMNS"
+      FIELD="CHECK"
+      SHOW_IF="(USE_SPATIAL_OPTIONS == 'true') and ((TABLE_ACTION=='CREATE') or (TABLE_ACTION=='DROP_CREATE') or 
+      		(TABLE_ACTION=='CREATE_IF_NOT_EXISTS') or (TABLE_ACTION=='DROP_IF_EXISTS_AND_CREATE'))"
+      NUM_ROW="9"
+    >
+      <DEFAULT>false</DEFAULT>
+    </PARAMETER>
+    
 	<PARAMETER
       NAME="DIE_ON_ERROR"
       FIELD="CHECK"
-      NUM_ROW="9"
+      NUM_ROW="10"
     >
       <DEFAULT>false</DEFAULT>
     </PARAMETER>
