Index: schema/java_type.exsd
===================================================================
--- schema/java_type.exsd	(revision 0)
+++ schema/java_type.exsd	(revision 0)
@@ -0,0 +1,123 @@
+<?xml version='1.0' encoding='UTF-8'?>
+<!-- Schema file written by PDE -->
+<schema targetNamespace="org.talend.core" xmlns="http://www.w3.org/2001/XMLSchema">
+<annotation>
+      <appInfo>
+         <meta.schema plugin="org.talend.core" id="java_type" name="Java Type"/>
+      </appInfo>
+      <documentation>
+         [Enter description of this extension point.]
+      </documentation>
+   </annotation>
+
+   <element name="extension">
+      <annotation>
+         <appInfo>
+            <meta.element />
+         </appInfo>
+      </annotation>
+      <complexType>
+         <sequence>
+            <element ref="JavaType" minOccurs="0" maxOccurs="unbounded"/>
+         </sequence>
+         <attribute name="point" type="string" use="required">
+            <annotation>
+               <documentation>
+                  
+               </documentation>
+            </annotation>
+         </attribute>
+         <attribute name="id" type="string">
+            <annotation>
+               <documentation>
+                  
+               </documentation>
+            </annotation>
+         </attribute>
+         <attribute name="name" type="string">
+            <annotation>
+               <documentation>
+                  
+               </documentation>
+               <appInfo>
+                  <meta.attribute translatable="true"/>
+               </appInfo>
+            </annotation>
+         </attribute>
+      </complexType>
+   </element>
+
+   <element name="JavaType">
+      <annotation>
+         <documentation>
+            Check First the class JavaType.
+
+All parameters will be used here.
+         </documentation>
+      </annotation>
+      <complexType>
+         <attribute name="Name" type="string" use="required">
+            <annotation>
+               <documentation>
+                  Name of the class
+               </documentation>
+            </annotation>
+         </attribute>
+         <attribute name="nullableClass" type="string" use="required">
+            <annotation>
+               <documentation>
+                  Must be something like: String.class / Integer.class ...
+               </documentation>
+               <appInfo>
+                  <meta.attribute kind="java" basedOn="java.lang.Class:"/>
+               </appInfo>
+            </annotation>
+         </attribute>
+         <attribute name="displayInContext" type="boolean" use="required">
+            <annotation>
+               <documentation>
+                  Display this type in contexts or not.
+               </documentation>
+            </annotation>
+         </attribute>
+      </complexType>
+   </element>
+
+   <annotation>
+      <appInfo>
+         <meta.section type="since"/>
+      </appInfo>
+      <documentation>
+         [Enter the first release in which this extension point appears.]
+      </documentation>
+   </annotation>
+
+   <annotation>
+      <appInfo>
+         <meta.section type="examples"/>
+      </appInfo>
+      <documentation>
+         [Enter extension point usage example here.]
+      </documentation>
+   </annotation>
+
+   <annotation>
+      <appInfo>
+         <meta.section type="apiinfo"/>
+      </appInfo>
+      <documentation>
+         [Enter API information here.]
+      </documentation>
+   </annotation>
+
+   <annotation>
+      <appInfo>
+         <meta.section type="implementation"/>
+      </appInfo>
+      <documentation>
+         [Enter information about supplied implementation of this extension point.]
+      </documentation>
+   </annotation>
+
+
+</schema>
Index: src/main/java/org/talend/core/prefs/ui/MetadataTypeLengthPreferencePage.java
===================================================================
--- src/main/java/org/talend/core/prefs/ui/MetadataTypeLengthPreferencePage.java	(revision 40305)
+++ src/main/java/org/talend/core/prefs/ui/MetadataTypeLengthPreferencePage.java	(working copy)
@@ -190,7 +190,7 @@
      * DOC qwei Comment method "createJavaFieldEditors".
      */
     private void createJavaFieldEditors(Composite com) {
-        JavaType[] strTypeValue = JavaTypesManager.JAVA_TYPES;
+        JavaType[] strTypeValue = JavaTypesManager.getJavaTypes();
         String[] strDisplay = new String[strTypeValue.length];
         String[] strValue = new String[strTypeValue.length];
         for (int i = 0; i < strDisplay.length; i++) {
Index: src/main/java/org/talend/core/ui/context/ContextTemplateComposite.java
===================================================================
--- src/main/java/org/talend/core/ui/context/ContextTemplateComposite.java	(revision 40305)
+++ src/main/java/org/talend/core/ui/context/ContextTemplateComposite.java	(working copy)
@@ -187,7 +187,7 @@
 
         final ECodeLanguage codeLanguage = LanguageManager.getCurrentLanguage();
         if (codeLanguage == ECodeLanguage.JAVA) {
-            comboBoxCellEditor = new ComboBoxCellEditor(tree, ContextConstant.ITEMS);
+            comboBoxCellEditor = new ComboBoxCellEditor(tree, ContextParameterJavaTypeManager.getJavaTypesLabels());
         } else {
             String[] values = ContextParameterJavaTypeManager.getPerlTypesLabels();
             comboBoxCellEditor = new ComboBoxCellEditor(tree, values);
Index: src/main/java/org/talend/core/ui/context/ContextManagerHelper.java
===================================================================
--- src/main/java/org/talend/core/ui/context/ContextManagerHelper.java	(revision 40305)
+++ src/main/java/org/talend/core/ui/context/ContextManagerHelper.java	(working copy)
@@ -419,7 +419,7 @@
 
         final ECodeLanguage codeLanguage = LanguageManager.getCurrentLanguage();
         if (codeLanguage == ECodeLanguage.JAVA) {
-            String[] values = ContextConstant.ITEMS;
+            String[] values = ContextParameterJavaTypeManager.getJavaTypesLabels();
             newType = contextParameterType.substring(3, contextParameterType.length());
             for (String format : values) {
                 if (format.indexOf(ContextConstant.DOWNWARDS_STRING) != -1) {
Index: src/main/java/org/talend/core/ui/context/model/template/ContextConstant.java
===================================================================
--- src/main/java/org/talend/core/ui/context/model/template/ContextConstant.java	(revision 40305)
+++ src/main/java/org/talend/core/ui/context/model/template/ContextConstant.java	(working copy)
@@ -33,7 +33,7 @@
     /*
      * java type
      */
-    public static final String[] ITEMS = new String[] { "boolean | Boolean", "char | Character", //$NON-NLS-1$ //$NON-NLS-2$
+    private static final String[] ITEMS = new String[] { "boolean | Boolean", "char | Character", //$NON-NLS-1$ //$NON-NLS-2$
             "Date", "double | Double", //$NON-NLS-1$ //$NON-NLS-2$
             "float | Float", "int | Integer", "long | Long", //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
             "short | Short", "String", //$NON-NLS-1$ //$NON-NLS-2$
Index: src/main/java/org/talend/core/ui/context/model/template/GroupBySourceProvider.java
===================================================================
--- src/main/java/org/talend/core/ui/context/model/template/GroupBySourceProvider.java	(revision 40305)
+++ src/main/java/org/talend/core/ui/context/model/template/GroupBySourceProvider.java	(working copy)
@@ -18,6 +18,7 @@
 import org.eclipse.swt.graphics.Image;
 import org.talend.core.language.ECodeLanguage;
 import org.talend.core.language.LanguageManager;
+import org.talend.core.model.metadata.types.ContextParameterJavaTypeManager;
 import org.talend.core.model.process.IContext;
 import org.talend.core.model.process.IContextManager;
 import org.talend.core.model.process.IContextParameter;
@@ -118,14 +119,14 @@
                                                     .getContextParameter(
                                                             ((ContextParameterSortedParent) element).getParameter().getName())
                                                     .getValue())) {
-                                        if (ContextConstant.ITEMS[0].equals(s)) {
+                                        if (ContextParameterJavaTypeManager.getJavaTypesLabels()[0].equals(s)) {
                                             getContextManager().getDefaultContext().getContextParameter(
                                                     ((ContextParameterSortedParent) element).getParameter().getName()).setValue(
                                                     Boolean.FALSE.toString());
                                         }
                                         return string[1];
                                     } else {
-                                        if (ContextConstant.ITEMS[0].equals(s)) {
+                                        if (ContextParameterJavaTypeManager.getJavaTypesLabels()[0].equals(s)) {
                                             if (!(Boolean.TRUE.toString().equals(getContextManager().getDefaultContext()
                                                     .getContextParameter(
                                                             ((ContextParameterSortedParent) element).getParameter().getName())
@@ -176,14 +177,14 @@
                                                     .getContextParameter(
                                                             ((ContextParameterSortedParent) element).getParameter().getName())
                                                     .getValue())) {
-                                        if (ContextConstant.ITEMS[0].equals(s)) {
+                                        if (ContextParameterJavaTypeManager.getJavaTypesLabels()[0].equals(s)) {
                                             getContextManager().getDefaultContext().getContextParameter(
                                                     ((ContextParameterSortedParent) element).getParameter().getName()).setValue(
                                                     Boolean.FALSE.toString());
                                         }
                                         return string[1];
                                     } else {
-                                        if (ContextConstant.ITEMS[0].equals(s)) {
+                                        if (ContextParameterJavaTypeManager.getJavaTypesLabels()[0].equals(s)) {
                                             if (!(Boolean.TRUE.toString().equals(getContextManager().getDefaultContext()
                                                     .getContextParameter(
                                                             ((ContextParameterSortedParent) element).getParameter().getName())
@@ -390,13 +391,13 @@
                                     .getContextParameter(son.getParameter().getName()).getValue())
                                     || ContextConstant.NULL_STRING.equals(getContextManager().getDefaultContext()
                                             .getContextParameter(son.getParameter().getName()).getValue())) {
-                                if (ContextConstant.ITEMS[0].equals(s)) {
+                                if (ContextParameterJavaTypeManager.getJavaTypesLabels()[0].equals(s)) {
                                     getContextManager().getDefaultContext().getContextParameter(son.getParameter().getName())
                                             .setValue(Boolean.FALSE.toString());
                                 }
                                 return string[1];
                             } else {
-                                if (ContextConstant.ITEMS[0].equals(s)) {
+                                if (ContextParameterJavaTypeManager.getJavaTypesLabels()[0].equals(s)) {
                                     if (!(Boolean.TRUE.toString().equals(getContextManager().getDefaultContext()
                                             .getContextParameter(son.getParameter().getName()).getValue()))
                                             && !(Boolean.FALSE.toString().equals(getContextManager().getDefaultContext()
Index: src/main/java/org/talend/core/ui/context/model/template/GroupByNothingProvider.java
===================================================================
--- src/main/java/org/talend/core/ui/context/model/template/GroupByNothingProvider.java	(revision 40305)
+++ src/main/java/org/talend/core/ui/context/model/template/GroupByNothingProvider.java	(working copy)
@@ -18,6 +18,7 @@
 import org.eclipse.swt.graphics.Image;
 import org.talend.core.language.ECodeLanguage;
 import org.talend.core.language.LanguageManager;
+import org.talend.core.model.metadata.types.ContextParameterJavaTypeManager;
 import org.talend.core.model.process.IContext;
 import org.talend.core.model.process.IContextManager;
 import org.talend.core.model.process.IContextParameter;
@@ -98,14 +99,14 @@
                                         || ContextConstant.NULL_STRING.equals(getContextManager().getDefaultContext()
                                                 .getContextParameter(((ContextParameterParent) element).getParameter().getName())
                                                 .getValue())) {
-                                    if (ContextConstant.ITEMS[0].equals(s)) {
+                                    if (ContextParameterJavaTypeManager.getJavaTypesLabels()[0].equals(s)) {
                                         getContextManager().getDefaultContext().getContextParameter(
                                                 ((ContextParameterParent) element).getParameter().getName()).setValue(
                                                 Boolean.FALSE.toString());
                                     }
                                     return string[1];
                                 } else {
-                                    if (ContextConstant.ITEMS[0].equals(s)) {
+                                    if (ContextParameterJavaTypeManager.getJavaTypesLabels()[0].equals(s)) {
                                         if (!(Boolean.TRUE.toString().equals(getContextManager().getDefaultContext()
                                                 .getContextParameter(((ContextParameterParent) element).getParameter().getName())
                                                 .getValue()))
@@ -146,14 +147,14 @@
                                         || ContextConstant.NULL_STRING.equals(getContextManager().getDefaultContext()
                                                 .getContextParameter(((ContextParameterParent) element).getParameter().getName())
                                                 .getValue())) {
-                                    if (ContextConstant.ITEMS[0].equals(s)) {
+                                    if (ContextParameterJavaTypeManager.getJavaTypesLabels()[0].equals(s)) {
                                         getContextManager().getDefaultContext().getContextParameter(
                                                 ((ContextParameterParent) element).getParameter().getName()).setValue(
                                                 Boolean.FALSE.toString());
                                     }
                                     return string[1];
                                 } else {
-                                    if (ContextConstant.ITEMS[0].equals(s)) {
+                                    if (ContextParameterJavaTypeManager.getJavaTypesLabels()[0].equals(s)) {
                                         if (!(Boolean.TRUE.toString().equals(getContextManager().getDefaultContext()
                                                 .getContextParameter(((ContextParameterParent) element).getParameter().getName())
                                                 .getValue()))
Index: src/main/java/org/talend/core/ui/context/model/template/ContextCellModifier.java
===================================================================
--- src/main/java/org/talend/core/ui/context/model/template/ContextCellModifier.java	(revision 40305)
+++ src/main/java/org/talend/core/ui/context/model/template/ContextCellModifier.java	(working copy)
@@ -83,8 +83,8 @@
                 String s = ContextManagerHelper.convertFormat(para.getType());
                 final ECodeLanguage codeLanguage = LanguageManager.getCurrentLanguage();
                 if (codeLanguage == ECodeLanguage.JAVA) {
-                    for (int i = 0; i < ContextConstant.ITEMS.length; i++) {
-                        if (s.equals(ContextConstant.ITEMS[i])) {
+                    for (int i = 0; i < ContextParameterJavaTypeManager.getJavaTypesLabels().length; i++) {
+                        if (s.equals(ContextParameterJavaTypeManager.getJavaTypesLabels()[i])) {
                             return i;
                         }
                     }
@@ -157,15 +157,15 @@
             String s = ContextManagerHelper.convertFormat(para.getType());
             final ECodeLanguage codeLanguage = LanguageManager.getCurrentLanguage();
             if (codeLanguage == ECodeLanguage.JAVA) {
-                for (int i = 0; i < ContextConstant.ITEMS.length; i++) {
-                    if (s.equals(ContextConstant.ITEMS[i])) {
+                for (int i = 0; i < ContextParameterJavaTypeManager.getJavaTypesLabels().length; i++) {
+                    if (s.equals(ContextParameterJavaTypeManager.getJavaTypesLabels()[i])) {
                         index = i;
                     }
                 }
                 if (index == ((Integer) value)) {
                     return;
                 }
-                String newType = getRealType(ContextConstant.ITEMS[(Integer) value]);
+                String newType = getRealType(ContextParameterJavaTypeManager.getJavaTypesLabels()[(Integer) value]);
                 String name = para.getName();
                 for (IContext context : getContextManager().getListContext()) {
                     for (IContextParameter contextParameter : context.getContextParameterList()) {
Index: src/main/java/org/talend/core/model/metadata/types/JavaTypesManager.java
===================================================================
--- src/main/java/org/talend/core/model/metadata/types/JavaTypesManager.java	(revision 40305)
+++ src/main/java/org/talend/core/model/metadata/types/JavaTypesManager.java	(working copy)
@@ -22,6 +22,13 @@
 import java.util.Set;
 
 import org.apache.commons.lang.ArrayUtils;
+import org.eclipse.core.runtime.CoreException;
+import org.eclipse.core.runtime.IConfigurationElement;
+import org.eclipse.core.runtime.IExtension;
+import org.eclipse.core.runtime.IExtensionPoint;
+import org.eclipse.core.runtime.IExtensionRegistry;
+import org.eclipse.core.runtime.Platform;
+import org.talend.commons.exception.ExceptionHandler;
 import org.talend.core.i18n.Messages;
 
 /**
@@ -82,7 +89,7 @@
 
     public static final JavaType PASSWORD = new JavaType(String.class, true, "Password"); //$NON-NLS-1$
 
-    public static final JavaType[] JAVA_TYPES = new JavaType[] { BOOLEAN, BYTE, BYTE_ARRAY, CHARACTER, DATE, DOUBLE, FLOAT,
+    private static final JavaType[] JAVA_TYPES = new JavaType[] { BOOLEAN, BYTE, BYTE_ARRAY, CHARACTER, DATE, DOUBLE, FLOAT,
             BIGDECIMAL, INTEGER, LONG, OBJECT, SHORT, STRING, LIST };
 
     private static Map<String, JavaType> shortNameToJavaType;
@@ -120,6 +127,22 @@
             JavaType javaType = JAVA_TYPES[i];
             addJavaType(javaType);
         }
+        IExtensionRegistry extensionRegistry = Platform.getExtensionRegistry();
+        IExtensionPoint extensionPoint = extensionRegistry.getExtensionPoint("org.talend.core.java_type"); //$NON-NLS-1$
+        IExtension[] extensions = extensionPoint.getExtensions();
+        for (IExtension extension : extensions) {
+            IConfigurationElement[] configurationElements = extension.getConfigurationElements();
+            for (IConfigurationElement configurationElement : configurationElements) {
+                try {
+                    Object myClass = configurationElement.createExecutableExtension("nullableClass");
+                    JavaType javaType = new JavaType(myClass.getClass());
+                    addJavaType(javaType);
+                } catch (CoreException e) {
+                    ExceptionHandler.process(e);
+                }
+            }
+        }
+
         idToJavaType.put(PASSWORD.getId(), PASSWORD);
     }
 
Index: src/main/java/org/talend/core/model/metadata/types/ContextParameterJavaTypeManager.java
===================================================================
--- src/main/java/org/talend/core/model/metadata/types/ContextParameterJavaTypeManager.java	(revision 40305)
+++ src/main/java/org/talend/core/model/metadata/types/ContextParameterJavaTypeManager.java	(working copy)
@@ -21,6 +21,13 @@
 import java.util.Set;
 
 import org.apache.commons.lang.ArrayUtils;
+import org.eclipse.core.runtime.CoreException;
+import org.eclipse.core.runtime.IConfigurationElement;
+import org.eclipse.core.runtime.IExtension;
+import org.eclipse.core.runtime.IExtensionPoint;
+import org.eclipse.core.runtime.IExtensionRegistry;
+import org.eclipse.core.runtime.Platform;
+import org.talend.commons.exception.ExceptionHandler;
 import org.talend.core.model.metadata.MetadataTalendType;
 
 /**
@@ -29,7 +36,7 @@
  */
 public class ContextParameterJavaTypeManager {
 
-    public static final JavaType[] JAVA_TYPES = new JavaType[] { JavaTypesManager.BOOLEAN, JavaTypesManager.CHARACTER,
+    private static final JavaType[] JAVA_TYPES = new JavaType[] { JavaTypesManager.BOOLEAN, JavaTypesManager.CHARACTER,
             JavaTypesManager.DATE, JavaTypesManager.DOUBLE, JavaTypesManager.FLOAT, JavaTypesManager.INTEGER,
             JavaTypesManager.LONG, JavaTypesManager.SHORT, JavaTypesManager.STRING, JavaTypesManager.OBJECT,
             JavaTypesManager.BIGDECIMAL, JavaTypesManager.FILE, JavaTypesManager.DIRECTORY, JavaTypesManager.VALUE_LIST,
@@ -83,6 +90,24 @@
             JavaType javaType = JAVA_TYPES[i];
             addJavaType(javaType);
         }
+        IExtensionRegistry extensionRegistry = Platform.getExtensionRegistry();
+        IExtensionPoint extensionPoint = extensionRegistry.getExtensionPoint("org.talend.core.java_type"); //$NON-NLS-1$
+        IExtension[] extensions = extensionPoint.getExtensions();
+        for (IExtension extension : extensions) {
+            IConfigurationElement[] configurationElements = extension.getConfigurationElements();
+            for (IConfigurationElement configurationElement : configurationElements) {
+                if ("true".equals(configurationElement.getAttribute("displayInContext"))) {
+                    try {
+                        Object myClass = configurationElement.createExecutableExtension("nullableClass");
+                        JavaType javaType = new JavaType(myClass.getClass());
+                        addJavaType(javaType);
+                    } catch (CoreException e) {
+                        ExceptionHandler.process(e);
+                    }
+                }
+            }
+        }
+
         final String[] loadTalendTypes = MetadataTalendType.getTalendTypesLabels(); //$NON-NLS-1$
         perlTypes.addAll(Arrays.asList(loadTalendTypes));
         perlTypes.add(PERL_FILE);
Index: plugin.xml
===================================================================
--- plugin.xml	(revision 40305)
+++ plugin.xml	(working copy)
@@ -18,6 +18,7 @@
    <extension-point id="routines_provider" name="Routines Provider" schema="schema/routines_provider.exsd"/>
    <extension-point id="systemRoutineLibrary" name="system routine library" schema="schema/systemRoutineLibrary.exsd"/>
    <extension-point id="cli_command" name="CommandLine Command" schema="schema/cli_command.exsd"/>
+   <extension-point id="java_type" name="Java Type" schema="schema/java_type.exsd"/>
 	
 	<extension
          point="org.eclipse.ui.preferencePages">
