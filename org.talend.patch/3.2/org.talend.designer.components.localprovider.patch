Index: org.talend.designer.components.ecosystem/META-INF/MANIFEST.MF
===================================================================
--- org.talend.designer.components.ecosystem/META-INF/MANIFEST.MF	(revision 31214)
+++ org.talend.designer.components.ecosystem/META-INF/MANIFEST.MF	(working copy)
@@ -25,3 +25,4 @@
  org.talend.designer.components.ecosystem.jobs,
  org.talend.designer.components.ecosystem.model,
  org.talend.designer.components.ecosystem.ui.views
+Eclipse-BundleShape: dir
Index: org.talend.designer.components.localprovider/components/tAggregateIn/tAggregateIn_main.javajet
===================================================================
--- org.talend.designer.components.localprovider/components/tAggregateIn/tAggregateIn_main.javajet	(revision 31214)
+++ org.talend.designer.components.localprovider/components/tAggregateIn/tAggregateIn_main.javajet	(working copy)
@@ -31,6 +31,7 @@
 String LAST = "last";
 String AVG = "avg";
 String COUNT_DISTINCT = "distinct";
+String UNION = "union";
 String LIST = "list";
 String LIST_OBJECT = "list_object";
 String STD_DEV = "std_dev";
@@ -171,6 +172,7 @@
 
 							boolean outputIsNumber = JavaTypesManager.isNumberType(outputJavaType, false);
 							boolean outputIsObject = outputJavaType == JavaTypesManager.OBJECT;
+							boolean outputIsGeometry = outputJavaType == JavaTypesManager.GEOMETRY;
 							boolean outputIsList = outputJavaType == JavaTypesManager.LIST;
 							boolean outputIsString = outputJavaType == JavaTypesManager.STRING;
 							boolean outputIsBigDecimal = outputJavaType == JavaTypesManager.BIGDECIMAL;
@@ -179,6 +181,7 @@
 							
 							boolean inputIsNumber = JavaTypesManager.isNumberType(inputJavaType, false);
 							boolean inputIsObject = inputJavaType == JavaTypesManager.OBJECT;
+							boolean inputIsGeometry = inputJavaType == JavaTypesManager.GEOMETRY;
 							boolean inputIsBoolean = inputJavaType == JavaTypesManager.BOOLEAN;
 							boolean inputIsList = inputJavaType == JavaTypesManager.LIST;
 							boolean inputIsString = inputJavaType == JavaTypesManager.STRING;
@@ -203,6 +206,7 @@
 								|| function.equals(FIRST) && sameInOutType
 								|| function.equals(LAST) && sameInOutType
 								|| function.equals(LIST) && outputIsString
+								|| function.equals(UNION) && outputIsGeometry
 								|| function.equals(LIST_OBJECT) && outputIsList
 								|| function.equals(COUNT) && outputIsNumber
 								|| function.equals(COUNT_DISTINCT) && outputIsNumber
Index: org.talend.designer.components.localprovider/components/tPostgresqlOutput/tPostgresqlOutput_end.javajet
===================================================================
--- org.talend.designer.components.localprovider/components/tPostgresqlOutput/tPostgresqlOutput_end.javajet	(revision 31214)
+++ org.talend.designer.components.localprovider/components/tPostgresqlOutput/tPostgresqlOutput_end.javajet	(working copy)
@@ -18,6 +18,50 @@
 	
 	String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
 	
+	String dbschema = ElementParameterParser.getValue(node, "__SCHEMA_DB__");
+	
+	String tableName = ElementParameterParser.getValue(node,"__TABLE__");
+	
+	boolean useSpatialOptions = ("true").equals(ElementParameterParser.getValue(node,"__USE_SPATIAL_OPTIONS__"));
+	
+	boolean createSpatialIndex = ("true").equals(ElementParameterParser.getValue(node,"__SPATIAL_INDEX__"));
+	
+	boolean createGeometryColumns = ("true").equals(ElementParameterParser.getValue(node,"__GEOMETRY_COLUMNS__"));
+    
+    if(createGeometryColumns && useSpatialOptions){
+		%>
+		java.sql.Statement stmtCreateGeoColumns_<%=cid%> = conn_<%=cid%>.createStatement();
+		
+		// Delete geometry columns entry if already exists. 
+		String deleteGeometryColumns_<%=cid %> = "DELETE FROM geometry_columns WHERE f_table_name='" + 
+												<%=tableName %> + "' AND f_table_schema='" + <%=dbschema %> +"'";
+		stmtCreateGeoColumns_<%=cid%>.execute(deleteGeometryColumns_<%=cid %>);
+			
+		// Create new entry in geometry columns table	
+        String insertGeometryColumns_<%=cid %> = "INSERT INTO geometry_columns VALUES ('', '"+ <%=dbschema %> +"', '"+ 
+        										<%=tableName %> +"','"+ geometryColumnName_<%=cid %> +
+        										"', "+dimension_<%=cid %>+", "+ SRID_<%=cid %> +", 'GEOMETRY')";
+        stmtCreateGeoColumns_<%=cid%>.execute(insertGeometryColumns_<%=cid %>);
+        
+        stmtCreateGeoColumns_<%=cid%>.close();
+		<%
+	}
+	if(createSpatialIndex && useSpatialOptions){
+		%>
+    	java.sql.Statement stmtCreateIndex_<%=cid%> = conn_<%=cid%>.createStatement();
+		// Drop spatial index if exists
+		String dropIndex_<%=cid %> = "DROP INDEX IF EXISTS " +<%=tableName %> +"_geo_index";
+		stmtCreateIndex_<%=cid%>.execute(dropIndex_<%=cid %>);
+		
+		// Create spatial index using GIST on geometry columns
+		String createIndex_<%=cid %> = "CREATE INDEX " + <%=tableName %> +"_geo_index ON "+ <%=tableName %> +
+								 " USING GIST (" + geometryColumnName_<%=cid %> +")";
+        stmtCreateIndex_<%=cid%>.execute(createIndex_<%=cid %>);
+        stmtCreateIndex_<%=cid%>.close();
+		<%
+	}
+    
+	
     if(("INSERT_OR_UPDATE").equals(dataAction)) {
         %>
         if(pstmtUpdate_<%=cid%> != null){
Index: org.talend.designer.components.localprovider/components/tPostgresqlOutput/tPostgresqlOutput_messages.properties
===================================================================
--- org.talend.designer.components.localprovider/components/tPostgresqlOutput/tPostgresqlOutput_messages.properties	(revision 31214)
+++ org.talend.designer.components.localprovider/components/tPostgresqlOutput/tPostgresqlOutput_messages.properties	(working copy)
@@ -1,4 +1,4 @@
-#Created by JInto - www.guh-software.de
+²#Created by JInto - www.guh-software.de
 #Fri Sep 07 10:53:13 CST 2007
 ADD_COLS.ITEM.NAME=Name
 ADD_COLS.ITEM.DATATYPE=Data type
@@ -72,7 +72,9 @@
 FIELD_OPTIONS.ITEM.UPDATABLE=Updatable
 FIELD_OPTIONS.ITEM.INSERTABLE=Insertable
 ENABLE_DEBUG_MODE.NAME=Enable debug mode
-
+USE_SPATIAL_OPTIONS.NAME=Use spatial options
+SPATIAL_INDEX.NAME=Create Spatial index
+GEOMETRY_COLUMNS.NAME=Create geometry columns reference
 NB_LINE_UPDATED.NAME=Number Of Updated Lines
 NB_LINE_INSERTED.NAME=Number Of Inserted Lines
 NB_LINE_DELETED.NAME=Number Of Deleted Lines
Index: org.talend.designer.components.localprovider/components/tPostgresqlOutput/tPostgresqlOutput_main.javajet
===================================================================
--- org.talend.designer.components.localprovider/components/tPostgresqlOutput/tPostgresqlOutput_main.javajet	(revision 31214)
+++ org.talend.designer.components.localprovider/components/tPostgresqlOutput/tPostgresqlOutput_main.javajet	(working copy)
@@ -39,6 +39,10 @@
     
     String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
     boolean isEnableDebug = ("true").equals(ElementParameterParser.getValue(node,"__ENABLE_DEBUG_MODE__"));
+    boolean useSpatialOptions = ("true").equals(ElementParameterParser.getValue(node,"__USE_SPATIAL_OPTIONS__"));
+    boolean createSpatialIndex = ("true").equals(ElementParameterParser.getValue(node,"__SPATIAL_INDEX__"));
+    boolean createGeometryColumns = ("true").equals(ElementParameterParser.getValue(node,"__GEOMETRY_COLUMNS__"));
+    
     String incomingConnName = null;
     List<IMetadataColumn> columnList = getColumnList(node);
     
@@ -109,7 +113,39 @@
                         %>
                         query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_")%>;
                         <%
-                    }                    
+                    }
+                    if (typeToGenerate.equals("Geometry")) {
+                        counter++;
+                        if((createGeometryColumns || createSpatialIndex) && useSpatialOptions) {
+                            %>
+                            geometryColumnName_<%=cid %> = "<%=column.getColumn().getLabel() %>";
+                            if (firstGeometry_<%=cid %>) {
+                                 org.opengis.referencing.crs.CoordinateReferenceSystem refSys_<%=cid %> = 
+                                        ((org.talend.sdi.geometry.Geometry) <%=incomingConnName%>.<%=column.getName()%>).getCRS();
+                                 if (refSys_<%=cid %> != null) {
+                                    dimension_<%=cid %> = refSys_<%=cid %>.getCoordinateSystem().getDimension();
+                                    try {
+                                        java.util.Set ident_<%=cid %> = refSys_<%=cid %>.getIdentifiers();
+                                        if ((ident_<%=cid %> == null || ident_<%=cid %>.isEmpty())
+                                            && refSys_<%=cid %> == org.geotools.referencing.crs.DefaultGeographicCRS.WGS84) {
+                                            SRID_<%=cid %> = 4326;
+                                        } else {
+                                            String code_<%=cid %> = ((org.geotools.referencing.NamedIdentifier) ident_<%=cid %>.toArray()[0]).getCode();
+                                            SRID_<%=cid %> = Integer.parseInt(code_<%=cid %>);
+                                        }
+                                    } catch (Exception e) {
+                                        System.out.println("SRID_<%=cid %> could not be determined");
+                                        SRID_<%=cid %> = -1;
+                                    }
+                                 }  else {
+                                    SRID_<%=cid %> = -1;
+                                    dimension_<%=cid %> = 2;
+                                 }
+                                firstGeometry_<%=cid %> = false;
+                            }
+                            <%
+                        }
+                    }               
                     counter++;                        
                 }
             }
@@ -168,7 +204,9 @@
                         %>
                         query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_")%>;
                         <%
-                    }                    
+                    }
+                    if (typeToGenerate.equals("Geometry"))
+                        counterCol++;                   
                     counterCol++;                   
                 }
             }
@@ -183,7 +221,9 @@
                         %>
                         query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_")%>;
                         <%
-                    }                    
+                    }
+                    if (typeToGenerate.equals("Geometry")) 
+                        counterCol++;
                     counterCol++;
                 }
             }
@@ -236,6 +276,8 @@
                     %>
                     <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, columnIndex, incomingConnName, cid, NORMAL_TYPE)%>
                     <%
+                    if (typeToGenerate.equals("Geometry"))
+                        columnIndex++;
                     columnIndex++;
                 }
             }
@@ -265,6 +307,8 @@
                             query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_")%>;
                             <%
                         }                        
+                        if (typeToGenerate.equals("Geometry"))
+                            counterCol++;
                         counterCol++;
                     }
                 }
@@ -279,6 +323,8 @@
                             query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_")%>;
                             <%
                         }                        
+                        if (typeToGenerate.equals("Geometry"))
+                            counterCol++;
                         counterCol++;                   
                     }
                 }
@@ -337,6 +383,8 @@
                             query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, columnInsert, incomingConnName, cid, "query_")%>;
                             <%
                         }                        
+                        if (typeToGenerate.equals("Geometry"))
+                            counterInsert++;
                         counterInsert++;
                     }
                 }
@@ -400,6 +448,8 @@
                         query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, columnUpdate, incomingConnName, cid, "query_")%>;
                         <%
                     }                    
+                    if (typeToGenerate.equals("Geometry"))
+                        counterColUpdate++;
                     counterColUpdate++;
                 }
             }
@@ -415,6 +465,8 @@
                         query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, columnUpdate, incomingConnName, cid, "query_")%>;
                         <%
                     }                    
+                    if (typeToGenerate.equals("Geometry"))
+                        counterColUpdate++;
                     counterColUpdate++;
                 }
             }
@@ -475,6 +527,8 @@
                             query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_")%>;
                             <%
                         }                        
+                        if (typeToGenerate.equals("Geometry"))
+                            counter++;
                         counter++;
                     }
                 }
@@ -536,6 +590,8 @@
                         query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_")%>;
                         <%
                     }                    
+                    if (typeToGenerate.equals("Geometry"))
+                        keyCounter++;
                     keyCounter++;
                 }
             }
Index: org.talend.designer.components.localprovider/components/tPostgresqlOutput/tPostgresqlOutput_begin.javajet
===================================================================
--- org.talend.designer.components.localprovider/components/tPostgresqlOutput/tPostgresqlOutput_begin.javajet	(revision 31214)
+++ org.talend.designer.components.localprovider/components/tPostgresqlOutput/tPostgresqlOutput_begin.javajet	(working copy)
@@ -57,6 +57,12 @@
 	String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
 
 	boolean isEnableDebug = ("true").equals(ElementParameterParser.getValue(node,"__ENABLE_DEBUG_MODE__"));
+	
+	boolean useSpatialOptions = ("true").equals(ElementParameterParser.getValue(node,"__USE_SPATIAL_OPTIONS__"));
+	
+	boolean createSpatialIndex = ("true").equals(ElementParameterParser.getValue(node,"__SPATIAL_INDEX__"));
+	
+	boolean createGeometryColumns = ("true").equals(ElementParameterParser.getValue(node,"__GEOMETRY_COLUMNS__"));	
 %>
 
 <%
@@ -276,5 +282,14 @@
         String query_<%=cid%> = null;
         <%
     }
+    if((createGeometryColumns || createSpatialIndex) && useSpatialOptions) {
+    	%>
+    	String geometryColumnName_<%=cid %> = null;
+    	// Initialize SRID
+    	int SRID_<%=cid %> = 0;
+    	int dimension_<%=cid %> = 0; 
+    	boolean firstGeometry_<%=cid %> = true;
+    	<%
+    }
 }
 %>
Index: org.talend.designer.components.localprovider/components/tPostgresqlOutput/tPostgresqlOutput_java.xml
===================================================================
--- org.talend.designer.components.localprovider/components/tPostgresqlOutput/tPostgresqlOutput_java.xml	(revision 31214)
+++ org.talend.designer.components.localprovider/components/tPostgresqlOutput/tPostgresqlOutput_java.xml	(working copy)
@@ -18,6 +18,7 @@
 
   <FAMILIES>
     <FAMILY>Databases/PostgreSQL</FAMILY>
+    <FAMILY>Geo/Database</FAMILY>
   </FAMILIES>
 
   <DOCUMENTATION>
@@ -195,10 +196,40 @@
       </TABLE>
     </PARAMETER>    
     
+    <PARAMETER
+      NAME="USE_SPATIAL_OPTIONS"
+      FIELD="CHECK"
+      NUM_ROW="9"
+      SHOW_IF="(TABLE_ACTION=='CREATE') or (TABLE_ACTION=='DROP_CREATE') or 
+      		(TABLE_ACTION=='CREATE_IF_NOT_EXISTS') or (TABLE_ACTION=='DROP_IF_EXISTS_AND_CREATE')"
+    >
+      <DEFAULT>false</DEFAULT>
+    </PARAMETER>
+    
+    <PARAMETER
+      NAME="SPATIAL_INDEX"
+      FIELD="CHECK"
+      SHOW_IF="(USE_SPATIAL_OPTIONS == 'true') and ((TABLE_ACTION=='CREATE') or (TABLE_ACTION=='DROP_CREATE') or 
+      		(TABLE_ACTION=='CREATE_IF_NOT_EXISTS') or (TABLE_ACTION=='DROP_IF_EXISTS_AND_CREATE'))"
+      NUM_ROW="9"
+    >
+      <DEFAULT>false</DEFAULT>
+    </PARAMETER>
+    
+    <PARAMETER
+      NAME="GEOMETRY_COLUMNS"
+      FIELD="CHECK"
+      SHOW_IF="(USE_SPATIAL_OPTIONS == 'true') and ((TABLE_ACTION=='CREATE') or (TABLE_ACTION=='DROP_CREATE') or 
+      		(TABLE_ACTION=='CREATE_IF_NOT_EXISTS') or (TABLE_ACTION=='DROP_IF_EXISTS_AND_CREATE'))"
+      NUM_ROW="9"
+    >
+      <DEFAULT>false</DEFAULT>
+    </PARAMETER>
+    
 	<PARAMETER
       NAME="DIE_ON_ERROR"
       FIELD="CHECK"
-      NUM_ROW="9"
+      NUM_ROW="10"
     >
       <DEFAULT>false</DEFAULT>
     </PARAMETER>
Index: org.talend.designer.components.localprovider/components/tAggregateOut/tAggregateOut_main.javajet
===================================================================
--- org.talend.designer.components.localprovider/components/tAggregateOut/tAggregateOut_main.javajet	(revision 31214)
+++ org.talend.designer.components.localprovider/components/tAggregateOut/tAggregateOut_main.javajet	(working copy)
@@ -49,8 +49,8 @@
 String LIST = "list";
 String LIST_OBJECT = "list_object";
 String STD_DEV = "std_dev";
+String UNION = "union";
 
-
 List<? extends IConnection> incomingConnections = node.getIncomingConnections();
 if (incomingConnections != null && !incomingConnections.isEmpty()) {
 	for (IConnection conn : incomingConnections) {
@@ -244,6 +244,7 @@
 
 		boolean outputIsNumber = JavaTypesManager.isNumberType(outputJavaType, false);
 		boolean outputIsObject = outputJavaType == JavaTypesManager.OBJECT;
+		boolean outputIsGeometry = outputJavaType == JavaTypesManager.GEOMETRY;
 		boolean outputIsList = outputJavaType == JavaTypesManager.LIST;
 		boolean outputIsString = outputJavaType == JavaTypesManager.STRING;
 		boolean outputIsBigDecimal = outputJavaType == JavaTypesManager.BIGDECIMAL;
@@ -252,6 +253,7 @@
 		
 		boolean inputIsNumber = JavaTypesManager.isNumberType(inputJavaType, false);
 		boolean inputIsObject = inputJavaType == JavaTypesManager.OBJECT;
+		boolean inputIsGeometry = inputJavaType == JavaTypesManager.GEOMETRY;
 		boolean inputIsBoolean = inputJavaType == JavaTypesManager.BOOLEAN;
 		boolean inputIsList = inputJavaType == JavaTypesManager.LIST;
 		boolean inputIsString = inputJavaType == JavaTypesManager.STRING;
@@ -278,6 +280,7 @@
 			|| function.equals(LIST) && outputIsString
 			|| function.equals(LIST_OBJECT) && outputIsList
 			|| function.equals(COUNT) && outputIsNumber
+			|| function.equals(UNION) && outputIsGeometry
 			|| function.equals(COUNT_DISTINCT) && outputIsNumber
 			|| function.equals(STD_DEV) && inputIsNumber && outputIsNumber
 		;
@@ -483,6 +486,14 @@
 					
 				}
 				
+			} else if(function.equals(UNION)){
+				%>// Load first one or union
+				if (operation_result_<%=cid %>.<%=outputColumnName %>_<%=function %> == null) {
+					operation_result_<%=cid %>.<%=outputColumnName %>_<%=function %> = <%=inputConn.getName() %>.<%=inputColumnName %>;
+				} else {
+					operation_result_<%=cid %>.<%=outputColumnName %>_<%=function %> = operation_result_<%=cid %>.<%=outputColumnName %>_<%=function %>.union(<%=inputConn.getName() %>.<%=inputColumnName %>);
+				}
+				<%
 			}
 			
 			if(ignoreNull && !isInputColumnPrimitive) { // T_OutMain_AggR_545
Index: org.talend.designer.components.localprovider/components/tAggregateOut/tAggregateOut_begin.javajet
===================================================================
--- org.talend.designer.components.localprovider/components/tAggregateOut/tAggregateOut_begin.javajet	(revision 31214)
+++ org.talend.designer.components.localprovider/components/tAggregateOut/tAggregateOut_begin.javajet	(working copy)
@@ -53,6 +53,7 @@
 String LIST = "list";
 String LIST_OBJECT = "list_object";
 String STD_DEV = "std_dev";
+String UNION = "union";
 
 int sizeOperations = operations.size();
 
@@ -433,6 +434,7 @@
 	
 			boolean outputIsNumber = JavaTypesManager.isNumberType(outputJavaType, false);
 			boolean outputIsObject = outputJavaType == JavaTypesManager.OBJECT;
+			boolean outputIsGeometry = outputJavaType == JavaTypesManager.GEOMETRY;
 			boolean outputIsList = outputJavaType == JavaTypesManager.LIST;
 			boolean outputIsString = outputJavaType == JavaTypesManager.STRING;
 			boolean outputIsBigDecimal = outputJavaType == JavaTypesManager.BIGDECIMAL;
@@ -441,6 +443,7 @@
 			
 			boolean inputIsNumber = JavaTypesManager.isNumberType(inputJavaType, false);
 			boolean inputIsObject = inputJavaType == JavaTypesManager.OBJECT;
+			boolean inputIsGeometry = inputJavaType == JavaTypesManager.GEOMETRY;
 			boolean inputIsBoolean = inputJavaType == JavaTypesManager.BOOLEAN;
 			boolean inputIsList = inputJavaType == JavaTypesManager.LIST;
 			boolean inputIsString = inputJavaType == JavaTypesManager.STRING;
@@ -467,6 +470,7 @@
 				|| function.equals(LIST) && outputIsString
 				|| function.equals(LIST_OBJECT) && outputIsList
 				|| function.equals(COUNT) && outputIsNumber
+				|| function.equals(UNION) && outputIsGeometry
 				|| function.equals(COUNT_DISTINCT) && outputIsNumber
 				|| function.equals(STD_DEV) && inputIsNumber && outputIsNumber
 			;
@@ -516,6 +520,11 @@
            		 	%>java.util.List <%=funin[OUTPUT_COLUMN] %>_<%=function %> = new java.util.ArrayList();
            			<%
            			
+           		} else if(UNION.equals(function)) {
+           		 
+           		 	%>org.talend.sdi.geometry.Geometry <%=funin[OUTPUT_COLUMN] %>_<%=function %> = null;
+           			<%
+           			
            		} else if(STD_DEV.equals(function)) {
            		
            			%>java.util.List<Double> <%=funin[OUTPUT_COLUMN] %>_<%=function %> = new java.util.ArrayList<Double>();
Index: org.talend.designer.components.localprovider/components/tAggregateOut/tAggregateOut_java.xml
===================================================================
--- org.talend.designer.components.localprovider/components/tAggregateOut/tAggregateOut_java.xml	(revision 31214)
+++ org.talend.designer.components.localprovider/components/tAggregateOut/tAggregateOut_java.xml	(working copy)
@@ -86,6 +86,7 @@
             <ITEM NAME="LIST"    VALUE="list"/>
             <ITEM NAME="LIST_OBJECT"    VALUE="list_object"/>
             <ITEM NAME="DISTINCT"    VALUE="distinct"/>
+            <ITEM NAME="UNION"    VALUE="union"/>
             <ITEM NAME="STD_DEV"    VALUE="std_dev"/>
           </ITEMS>
         </ITEM>
Index: org.talend.designer.components.localprovider/components/tPostgresqlInput/tPostgresqlInput_begin.javajet
===================================================================
--- org.talend.designer.components.localprovider/components/tPostgresqlInput/tPostgresqlInput_begin.javajet	(revision 31214)
+++ org.talend.designer.components.localprovider/components/tPostgresqlInput/tPostgresqlInput_begin.javajet	(working copy)
@@ -174,6 +174,13 @@
                                         <%=firstConnName%>.<%=column.getLabel()%> = null;
                                     }                                    
                                     <%
+                                } else if(typeToGenerate.equals("Geometry")) {
+                                	%>
+                                	org.postgis.Geometry o = org.postgis.PGgeometry.geomFromString(rs_<%=cid %>.getObject(<%=currentColNo%>).toString());
+                                	StringBuffer sb = new StringBuffer();
+                                	o.outerWKT(sb, false);
+                                	<%=firstConnName%>.<%=column.getLabel()%> = new Geometry(sb.toString());
+                                	<%
                                 } else {		  
                                     %>
                                     if(rs_<%=cid %>.getObject(<%=currentColNo%>) != null) {
Index: org.talend.designer.components.localprovider/components/tPostgresqlInput/tPostgresqlInput_java.xml
===================================================================
--- org.talend.designer.components.localprovider/components/tPostgresqlInput/tPostgresqlInput_java.xml	(revision 31214)
+++ org.talend.designer.components.localprovider/components/tPostgresqlInput/tPostgresqlInput_java.xml	(working copy)
@@ -16,6 +16,7 @@
 
   <FAMILIES>
     <FAMILY>Databases/PostgreSQL</FAMILY>
+    <FAMILY>Geo/Database</FAMILY>
   </FAMILIES>
 
   <DOCUMENTATION>
@@ -218,6 +219,9 @@
    <CODEGENERATION>
      <IMPORTS>
      	<IMPORT NAME="Driver-Postgres" MODULE="postgresql-8.3-603.jdbc3.jar" REQUIRED="true" />
+     	<IMPORT NAME="Driver-Postgis" MODULE="postgis_1.4.0.jar" REQUIRED="true" />
+     	<IMPORT NAME="org.talend.sdi" MODULE="org.talend.sdi.jar" REQUIRED="true" />
+     	<IMPORT NAME="jts" MODULE="jts-1.9.jar" REQUIRED="true"/>
      </IMPORTS>
    </CODEGENERATION>
 
Index: org.talend.designer.components.localprovider/components/templates/db_output_bulk.skeleton
===================================================================
--- org.talend.designer.components.localprovider/components/templates/db_output_bulk.skeleton	(revision 31214)
+++ org.talend.designer.components.localprovider/components/templates/db_output_bulk.skeleton	(working copy)
@@ -139,7 +139,10 @@
             this.sqlStmt = sql;
         }
         public String getSqlStmt() {
-            return this.sqlStmt;
+            if (this.getColumn().getTalendType().equals("id_Geometry"))
+               return "GeomFromText(?, ?)";    // For PostGIS
+            else
+				return this.sqlStmt;
         }
         public void setValue(String value) {
             this.value = value;
@@ -868,7 +871,26 @@
                 setStmt.append("} else {\r\n");
                 setStmt.append(prefix + cid + ".setNull(" + index + ", java.sql.Types.DATE);\r\n");
                 setStmt.append("}\r\n");
-            } else {
+            } else if(typeToGenerate.equals("Geometry")) {
+                // Load geometry
+                setStmt.append(
+                                prefix +
+                                cid +
+                                ".setString(" + 
+                                    index +
+                                    ", ((org.talend.sdi.geometry.Geometry)(" +
+                                    incomingConnName + "." + column.getName() + ")).toString()" +
+                                    ");\r\n");
+                // TODO : should use forceCoordinate first, then getSRID method or -1 if it's null.
+                setStmt.append(
+                                prefix +
+                                cid +
+                                ".setInt(" + 
+                                    index + 
+                                    " + 1, ((org.talend.sdi.geometry.Geometry)(" + 
+                                    incomingConnName + "." + column.getName() + ")).getSRID()" +
+                                    ");\r\n");
+			} else {
                 setStmt.append(prefix + cid + ".set" + typeToGenerate + "(" + index + ", " + incomingConnName + "." + column.getName() + ");\r\n");
             }
             if(isObject) {
Index: org.talend.designer.components.localprovider/src/main/java/org/talend/designer/components/model/ComponentsFactory.java
===================================================================
--- org.talend.designer.components.localprovider/src/main/java/org/talend/designer/components/model/ComponentsFactory.java	(revision 31214)
+++ org.talend.designer.components.localprovider/src/main/java/org/talend/designer/components/model/ComponentsFactory.java	(working copy)
@@ -287,7 +287,7 @@
                         componentsCache.put(xmlMainFile.getAbsolutePath(), currentComp);
                     }
                 } catch (MissingMainXMLComponentFileException e) {
-                    log.trace(currentFolder.getName() + " is not a " + getCodeLanguageSuffix() + " component", e); //$NON-NLS-1$ //$NON-NLS-2$
+                    log.debug(currentFolder.getName() + " is not a " + getCodeLanguageSuffix() + " component", e); //$NON-NLS-1$ //$NON-NLS-2$
                 } catch (BusinessException e) {
                     BusinessException ex = new BusinessException("Cannot load component \"" + currentFolder.getName() + "\": " //$NON-NLS-1$ //$NON-NLS-2$
                             + e.getMessage(), e);
Index: org.talend.designer.components.localprovider/build.properties
===================================================================
--- org.talend.designer.components.localprovider/build.properties	(revision 31214)
+++ org.talend.designer.components.localprovider/build.properties	(working copy)
@@ -7,3 +7,6 @@
                plugin.properties
 javacSource=1.5
 javacTarget=1.5
+bin.excludes = components/ext/sdi/,\
+               components/ext/sdisandbox/,\
+               components/ext/sdisextante/
\ No newline at end of file
Index: org.talend.designer.components.localprovider/META-INF/MANIFEST.MF
===================================================================
--- org.talend.designer.components.localprovider/META-INF/MANIFEST.MF	(revision 31214)
+++ org.talend.designer.components.localprovider/META-INF/MANIFEST.MF	(working copy)
@@ -5,7 +5,8 @@
 Bundle-Version: 2.2.0.qualifier
 Bundle-Activator: org.talend.designer.components.ComponentsLocalProviderPlugin
 Bundle-Localization: plugin
-Require-Bundle: org.eclipse.ui,
+Require-Bundle: org.apache.log4j;bundle-version="1.2.13",
+ org.eclipse.ui,
  org.eclipse.core.runtime,
  org.talend.commons,
  org.talend.libraries,
@@ -13,10 +14,10 @@
  org.talend.core,
  org.eclipse.gmf.runtime.common.ui,
  org.talend.commons.ui,
- org.apache.log4j;bundle-version="1.2.13",
  org.talend.librariesmanager
 Eclipse-LazyStart: true
 Bundle-Vendor: .Talend SA.
 Export-Package: org.talend.designer.components,
  org.talend.designer.components.lookup.common,
  org.talend.designer.components.ui
+Eclipse-BundleShape: dir
