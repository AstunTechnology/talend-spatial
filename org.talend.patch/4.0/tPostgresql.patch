Index: org.talend.designer.components.localprovider/components/tPostgresqlOutput/tPostgresqlOutput_end.javajet
===================================================================
--- org.talend.designer.components.localprovider/components/tPostgresqlOutput/tPostgresqlOutput_end.javajet	(revision 38739)
+++ org.talend.designer.components.localprovider/components/tPostgresqlOutput/tPostgresqlOutput_end.javajet	(working copy)
@@ -18,6 +18,50 @@
 	
 	String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
 	
+	String dbschema = ElementParameterParser.getValue(node, "__SCHEMA_DB__");
+	
+	String tableName = ElementParameterParser.getValue(node,"__TABLE__");
+	
+	boolean useSpatialOptions = ("true").equals(ElementParameterParser.getValue(node,"__USE_SPATIAL_OPTIONS__"));
+	
+	boolean createSpatialIndex = ("true").equals(ElementParameterParser.getValue(node,"__SPATIAL_INDEX__"));
+	
+	boolean createGeometryColumns = ("true").equals(ElementParameterParser.getValue(node,"__GEOMETRY_COLUMNS__"));
+    
+    if(createGeometryColumns && useSpatialOptions){
+		%>
+		java.sql.Statement stmtCreateGeoColumns_<%=cid%> = conn_<%=cid%>.createStatement();
+		
+		// Delete geometry columns entry if already exists. 
+		String deleteGeometryColumns_<%=cid %> = "DELETE FROM geometry_columns WHERE f_table_name='" + 
+												<%=tableName %> + "' AND f_table_schema='" + <%=dbschema %> +"'";
+		stmtCreateGeoColumns_<%=cid%>.execute(deleteGeometryColumns_<%=cid %>);
+			
+		// Create new entry in geometry columns table	
+        String insertGeometryColumns_<%=cid %> = "INSERT INTO geometry_columns VALUES ('', '"+ <%=dbschema %> +"', '"+ 
+        										<%=tableName %> +"','"+ geometryColumnName_<%=cid %> +
+        										"', "+dimension_<%=cid %>+", "+ SRID_<%=cid %> +", 'GEOMETRY')";
+        stmtCreateGeoColumns_<%=cid%>.execute(insertGeometryColumns_<%=cid %>);
+        
+        stmtCreateGeoColumns_<%=cid%>.close();
+		<%
+	}
+	if(createSpatialIndex && useSpatialOptions){
+		%>
+    	java.sql.Statement stmtCreateIndex_<%=cid%> = conn_<%=cid%>.createStatement();
+		// Drop spatial index if exists
+		String dropIndex_<%=cid %> = "DROP INDEX IF EXISTS " + <%=tableName %> +"_geo_index";
+		stmtCreateIndex_<%=cid%>.execute(dropIndex_<%=cid %>);
+		
+		// Create spatial index using GIST on geometry columns
+		String createIndex_<%=cid %> = "CREATE INDEX " + <%=tableName %> +"_geo_index ON \""+ <%=tableName %> +
+								 "\" USING GIST (\"" + geometryColumnName_<%=cid %> +"\")";
+        stmtCreateIndex_<%=cid%>.execute(createIndex_<%=cid %>);
+        stmtCreateIndex_<%=cid%>.close();
+		<%
+	}
+    
+	
     if(("INSERT_OR_UPDATE").equals(dataAction)) {
         %>
         if(pstmtUpdate_<%=cid%> != null){
Index: org.talend.designer.components.localprovider/components/tPostgresqlOutput/tPostgresqlOutput_messages.properties
===================================================================
--- org.talend.designer.components.localprovider/components/tPostgresqlOutput/tPostgresqlOutput_messages.properties	(revision 38739)
+++ org.talend.designer.components.localprovider/components/tPostgresqlOutput/tPostgresqlOutput_messages.properties	(working copy)
@@ -1,4 +1,4 @@
-#Created by JInto - www.guh-software.de
+²#Created by JInto - www.guh-software.de
 #Fri Sep 07 10:53:13 CST 2007
 ADD_COLS.ITEM.NAME=Name
 ADD_COLS.ITEM.DATATYPE=Data type
@@ -72,7 +72,9 @@
 FIELD_OPTIONS.ITEM.UPDATABLE=Updatable
 FIELD_OPTIONS.ITEM.INSERTABLE=Insertable
 ENABLE_DEBUG_MODE.NAME=Enable debug mode
-
+USE_SPATIAL_OPTIONS.NAME=Use spatial options
+SPATIAL_INDEX.NAME=Create Spatial index
+GEOMETRY_COLUMNS.NAME=Create geometry columns reference
 NB_LINE_UPDATED.NAME=Number Of Updated Lines
 NB_LINE_INSERTED.NAME=Number Of Inserted Lines
 NB_LINE_DELETED.NAME=Number Of Deleted Lines
Index: org.talend.designer.components.localprovider/components/tPostgresqlOutput/tPostgresqlOutput_begin.javajet
===================================================================
--- org.talend.designer.components.localprovider/components/tPostgresqlOutput/tPostgresqlOutput_begin.javajet	(revision 38739)
+++ org.talend.designer.components.localprovider/components/tPostgresqlOutput/tPostgresqlOutput_begin.javajet	(working copy)
@@ -57,6 +57,12 @@
 	String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
 
 	boolean isEnableDebug = ("true").equals(ElementParameterParser.getValue(node,"__ENABLE_DEBUG_MODE__"));
+
+	boolean useSpatialOptions = ("true").equals(ElementParameterParser.getValue(node,"__USE_SPATIAL_OPTIONS__"));
+	
+	boolean createSpatialIndex = ("true").equals(ElementParameterParser.getValue(node,"__SPATIAL_INDEX__"));
+	
+	boolean createGeometryColumns = ("true").equals(ElementParameterParser.getValue(node,"__GEOMETRY_COLUMNS__"));		
 %>
 
 <%
@@ -280,5 +286,14 @@
        	<%@ include file="../templates/DB/Output/splitSQLForAllDBInBegin.javajet" %>
         <%
     }
+    if((createGeometryColumns || createSpatialIndex) && useSpatialOptions) {
+    	%>
+    	String geometryColumnName_<%=cid %> = null;
+    	// Initialize SRID
+    	int SRID_<%=cid %> = 0;
+    	int dimension_<%=cid %> = 0; 
+    	boolean firstGeometry_<%=cid %> = true;
+    	<%
+    }
 }
 %>
Index: org.talend.designer.components.localprovider/components/tPostgresqlOutput/tPostgresqlOutput_main.javajet
===================================================================
--- org.talend.designer.components.localprovider/components/tPostgresqlOutput/tPostgresqlOutput_main.javajet	(revision 38739)
+++ org.talend.designer.components.localprovider/components/tPostgresqlOutput/tPostgresqlOutput_main.javajet	(working copy)
@@ -40,6 +40,10 @@
     String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
     boolean isEnableDebug = ("true").equals(ElementParameterParser.getValue(node,"__ENABLE_DEBUG_MODE__"));
     
+    boolean useSpatialOptions = ("true").equals(ElementParameterParser.getValue(node,"__USE_SPATIAL_OPTIONS__"));
+    boolean createSpatialIndex = ("true").equals(ElementParameterParser.getValue(node,"__SPATIAL_INDEX__"));
+    boolean createGeometryColumns = ("true").equals(ElementParameterParser.getValue(node,"__GEOMETRY_COLUMNS__"));
+    
     //feature:2880
     getManager(dbmsId, cid, node);
     boolean whereSupportNull = ElementParameterParser.getValue(node, "__SUPPORT_NULL_WHERE__").equals("true");
@@ -109,13 +113,52 @@
                 if(column.isInsertable()) {
                     String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                     %>
+                    // <%=typeToGenerate %> <%=column %>
                     <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, counter, incomingConnName, cid, NORMAL_TYPE)%>
                     <%
                     if(isEnableDebug) {
                         %>
                         query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counter, "insertSQLSplits_")%>;
                         <%
-                    }                    
+                    }
+                    if (typeToGenerate.equals("Geometry")) {
+                        counter++;
+                        if((createGeometryColumns || createSpatialIndex) && useSpatialOptions) {
+                            %>
+                            geometryColumnName_<%=cid %> = "<%=column.getColumn().getLabel() %>";
+                            if (firstGeometry_<%=cid %>) {
+                                dimension_<%=cid %> = 2;
+                                
+                                // A null first geometry will lead to unknown coordinate system  
+                                if (<%=incomingConnName%>.<%=column.getName()%> == null) {
+                            	    SRID_<%=cid %> = -1;
+                                } else {
+                                    org.opengis.referencing.crs.CoordinateReferenceSystem refSys_<%=cid %> = 
+                                        ((org.talend.sdi.geometry.Geometry) <%=incomingConnName%>.<%=column.getName()%>).getCRS();
+                                    if (refSys_<%=cid %> != null) {
+                                        dimension_<%=cid %> = refSys_<%=cid %>.getCoordinateSystem().getDimension();
+                                        try {
+                                            java.util.Set ident_<%=cid %> = refSys_<%=cid %>.getIdentifiers();
+                                            if ((ident_<%=cid %> == null || ident_<%=cid %>.isEmpty())
+                                                && refSys_<%=cid %> == org.geotools.referencing.crs.DefaultGeographicCRS.WGS84) {
+                                                SRID_<%=cid %> = 4326;
+                                            } else {
+                                                String code_<%=cid %> = ((org.geotools.referencing.NamedIdentifier) ident_<%=cid %>.toArray()[0]).getCode();
+                                                SRID_<%=cid %> = Integer.parseInt(code_<%=cid %>);
+                                            }
+                                        } catch (Exception e) {
+                                            System.out.println("SRID_<%=cid %> could not be determined");
+                                            SRID_<%=cid %> = -1;
+                                        }
+                                     }  else {
+                                        SRID_<%=cid %> = -1;
+                                     }
+                                     firstGeometry_<%=cid %> = false;
+                                 }
+                            }
+                            <%
+                        }
+                    }             
                     counter++;                        
                 }
             }
@@ -163,6 +206,7 @@
                 if(column.isUpdatable()) {
                     String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                     %>
+                    // <%=typeToGenerate %> <%=column %>
                     <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, counterCol, incomingConnName, cid, NORMAL_TYPE)%>
                     <%
                     if(isEnableDebug) {
@@ -170,6 +214,8 @@
                         query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_")%>;
                         <%
                     }                    
+                    if (typeToGenerate.equals("Geometry"))
+                        counterCol++;       
                     counterCol++;                   
                 }
             }
@@ -190,6 +236,8 @@
                         query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_", "(("+incomingConnName+"."+column.getName()+"==null)?1:0)")%>;
                         <%
                     }
+	                    if (typeToGenerate.equals("Geometry"))
+    	                    counterCol++;       
                     	counterCol++;
                        }
                      //#############                      
@@ -201,7 +249,9 @@
                         query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_")%>;
                         <%
                     }                    
-                    counterCol++;
+                        if (typeToGenerate.equals("Geometry"))
+    	                    counterCol++;       
+        		        counterCol++;
                 }
             }
             if(isEnableDebug) {
@@ -260,6 +310,8 @@
                     %>
                     <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, columnIndex, incomingConnName, cid, NORMAL_TYPE)%>
                     <%
+                    if (typeToGenerate.equals("Geometry")) 
+                        columnIndex++;
                     columnIndex++;
                 }
             }
@@ -284,6 +336,8 @@
                             query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_")%>;
                             <%
                         }                        
+    	                if (typeToGenerate.equals("Geometry")) 
+	                        counterCol++;
                         counterCol++;
                     }
                 }
@@ -302,6 +356,8 @@
 	                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_", "(("+incomingConnName+"."+column.getName()+"==null)?1:0)")%>;
 	                        <%
 	                    	} 
+    		                if (typeToGenerate.equals("Geometry")) 
+		                        counterCol++;
 	                    	counterCol++;
 	                       }
 	                     //#############                      
@@ -313,6 +369,8 @@
                             query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_")%>;
                             <%
                         }                        
+    	                if (typeToGenerate.equals("Geometry")) 
+	                        counterCol++;
                         counterCol++;                   
                     }
                 }
@@ -366,6 +424,8 @@
                             query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, columnInsert, incomingConnName, cid, "query_" ,  counterInsert, "insertSQLSplits_")%>;
                             <%
                         }                        
+    	                if (typeToGenerate.equals("Geometry")) 
+	                        counterInsert++;
                         counterInsert++;
                     }
                 }
@@ -423,7 +483,9 @@
                         %>
                         query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, columnUpdate, incomingConnName, cid, "query_" , counterColUpdate, "updateSQLSplits_")%>;
                         <%
-                    }                    
+                    }                  
+   	                if (typeToGenerate.equals("Geometry")) 
+                        counterColUpdate++;
                     counterColUpdate++;
                 }
             }
@@ -443,6 +505,8 @@
 	                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, columnUpdate, incomingConnName, cid, "query_" , counterColUpdate, "updateSQLSplits_", "(("+incomingConnName+"."+columnUpdate.getName()+"==null)?1:0)")%>;
 	                        <%
 	                    	}
+   		                if (typeToGenerate.equals("Geometry")) 
+	                        counterColUpdate++;
                     	counterColUpdate++;
                        }
                      //#############                      
@@ -455,6 +519,8 @@
                         query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, columnUpdate, incomingConnName, cid, "query_" , counterColUpdate, "updateSQLSplits_")%>;
                         <%
                     }                    
+                    if (typeToGenerate.equals("Geometry")) 
+                        counterColUpdate++;
                     counterColUpdate++;
                 }
             }
@@ -515,6 +581,8 @@
                             query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counter, "insertSQLSplits_")%>;
                             <%
                         }                        
+                        if (typeToGenerate.equals("Geometry")) 
+                    	    counter++;
                         counter++;
                     }
                 }
@@ -575,6 +643,8 @@
 	                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , keyCounter, "deleteSQLSplits_", "(("+incomingConnName+"."+column.getName()+"==null)?1:0)")%>;
 	                        <%
 	                    	}
+                        if (typeToGenerate.equals("Geometry")) 
+                    	    keyCounter++;
                     	 keyCounter++;
                        }
                      //#############                      
@@ -585,7 +655,9 @@
                         %>
                         query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , keyCounter, "deleteSQLSplits_")%>;
                         <%
-                    }                    
+                    }   
+                    if (typeToGenerate.equals("Geometry")) 
+                        keyCounter++;
                     keyCounter++;
                 }
             }
Index: org.talend.designer.components.localprovider/components/tPostgresqlOutput/tPostgresqlOutput_java.xml
===================================================================
--- org.talend.designer.components.localprovider/components/tPostgresqlOutput/tPostgresqlOutput_java.xml	(revision 38739)
+++ org.talend.designer.components.localprovider/components/tPostgresqlOutput/tPostgresqlOutput_java.xml	(working copy)
@@ -18,6 +18,7 @@
 
   <FAMILIES>
     <FAMILY>Databases/PostgreSQL</FAMILY>
+    <FAMILY>Geo/Database</FAMILY>
   </FAMILIES>
 
   <DOCUMENTATION>
@@ -197,10 +198,40 @@
       </TABLE>
     </PARAMETER>    
     
+    <PARAMETER
+      NAME="USE_SPATIAL_OPTIONS"
+      FIELD="CHECK"
+      NUM_ROW="9"
+      SHOW_IF="(TABLE_ACTION=='CREATE') or (TABLE_ACTION=='DROP_CREATE') or 
+      		(TABLE_ACTION=='CREATE_IF_NOT_EXISTS') or (TABLE_ACTION=='DROP_IF_EXISTS_AND_CREATE')"
+    >
+      <DEFAULT>false</DEFAULT>
+    </PARAMETER>
+    
+    <PARAMETER
+      NAME="SPATIAL_INDEX"
+      FIELD="CHECK"
+      SHOW_IF="(USE_SPATIAL_OPTIONS == 'true') and ((TABLE_ACTION=='CREATE') or (TABLE_ACTION=='DROP_CREATE') or 
+      		(TABLE_ACTION=='CREATE_IF_NOT_EXISTS') or (TABLE_ACTION=='DROP_IF_EXISTS_AND_CREATE'))"
+      NUM_ROW="9"
+    >
+      <DEFAULT>false</DEFAULT>
+    </PARAMETER>
+    
+    <PARAMETER
+      NAME="GEOMETRY_COLUMNS"
+      FIELD="CHECK"
+      SHOW_IF="(USE_SPATIAL_OPTIONS == 'true') and ((TABLE_ACTION=='CREATE') or (TABLE_ACTION=='DROP_CREATE') or 
+      		(TABLE_ACTION=='CREATE_IF_NOT_EXISTS') or (TABLE_ACTION=='DROP_IF_EXISTS_AND_CREATE'))"
+      NUM_ROW="9"
+    >
+      <DEFAULT>false</DEFAULT>
+    </PARAMETER>
+    
 	<PARAMETER
       NAME="DIE_ON_ERROR"
       FIELD="CHECK"
-      NUM_ROW="9"
+      NUM_ROW="10"
     >
       <DEFAULT>false</DEFAULT>
     </PARAMETER>
@@ -295,12 +326,18 @@
 		NUM_ROW="20">
 		  <DEFAULT>false</DEFAULT>
 	</PARAMETER>
-	    
+
+	<PARAMETER NAME="IMPORT" FIELD="MEMO_IMPORT" REQUIRED="false" SHOW="false" NUM_ROW="2">
+	  <DEFAULT>import org.talend.sdi.geometry.Geometry;</DEFAULT>
+	</PARAMETER>	    
   </ADVANCED_PARAMETERS>
 
   <CODEGENERATION>
     <IMPORTS>
     	<IMPORT NAME="Driver-Postgres" MODULE="postgresql-8.3-603.jdbc3.jar" REQUIRED="true" />
+    	<IMPORT NAME="Driver-Postgis" MODULE="postgis_1.4.0.jar" REQUIRED="true" />
+     	<IMPORT NAME="org.talend.sdi" MODULE="org.talend.sdi.jar" REQUIRED="true" />
+     	<IMPORT NAME="jts" MODULE="jts-1.9.jar" REQUIRED="true"/>
     </IMPORTS>
   </CODEGENERATION>
    
Index: org.talend.designer.components.localprovider/components/tPostgresqlInput/tPostgresqlInput_java.xml
===================================================================
--- org.talend.designer.components.localprovider/components/tPostgresqlInput/tPostgresqlInput_java.xml	(revision 38739)
+++ org.talend.designer.components.localprovider/components/tPostgresqlInput/tPostgresqlInput_java.xml	(working copy)
@@ -16,6 +16,7 @@
 
   <FAMILIES>
     <FAMILY>Databases/PostgreSQL</FAMILY>
+    <FAMILY>Geo/Database</FAMILY>
   </FAMILIES>
 
   <DOCUMENTATION>
@@ -213,12 +214,19 @@
 		<ITEMS BASED_ON_SCHEMA="true">
 			<ITEM NAME="TRIM" FIELD="CHECK"></ITEM>
 		</ITEMS>
-	</PARAMETER>	    
+	</PARAMETER>
+		
+	<PARAMETER NAME="IMPORT" FIELD="MEMO_IMPORT" REQUIRED="false" SHOW="false" NUM_ROW="2">
+	  <DEFAULT>import org.talend.sdi.geometry.Geometry;</DEFAULT>
+	</PARAMETER>    
    </ADVANCED_PARAMETERS>
 	
    <CODEGENERATION>
      <IMPORTS>
      	<IMPORT NAME="Driver-Postgres" MODULE="postgresql-8.3-603.jdbc3.jar" REQUIRED="true" />
+     	<IMPORT NAME="Driver-Postgis" MODULE="postgis_1.4.0.jar" REQUIRED="true" />
+     	<IMPORT NAME="org.talend.sdi" MODULE="org.talend.sdi.jar" REQUIRED="true" />
+     	<IMPORT NAME="jts" MODULE="jts-1.9.jar" REQUIRED="true"/>
      </IMPORTS>
    </CODEGENERATION>
 
Index: org.talend.designer.components.localprovider/components/templates/DB/Input/AbstractDBInputBegin.javajet
===================================================================
--- org.talend.designer.components.localprovider/components/templates/DB/Input/AbstractDBInputBegin.javajet	(revision 38739)
+++ org.talend.designer.components.localprovider/components/templates/DB/Input/AbstractDBInputBegin.javajet	(working copy)
@@ -125,6 +125,13 @@
 %>
 									<%dbInputBeginUtil.generateBytesResultSet(firstConnName, column, currentColNo);%>
 <%
+								} else if(typeToGenerate.equals("Geometry")) {
+%>
+                                	org.postgis.Geometry o = org.postgis.PGgeometry.geomFromString(rs_<%=cid %>.getObject(<%=currentColNo%>).toString());
+                                	StringBuffer sb = new StringBuffer();
+                                	o.outerWKT(sb, false);
+                                	<%=firstConnName%>.<%=column.getLabel()%> = new Geometry(sb.toString());
+<%
                  	            } else {
 %>
 		                          <%dbInputBeginUtil.generateOthersResultSet( firstConnName, column,  currentColNo,  typeToGenerate);%>
Index: org.talend.designer.components.localprovider/components/templates/db_output_bulk.skeleton
===================================================================
--- org.talend.designer.components.localprovider/components/templates/db_output_bulk.skeleton	(revision 38739)
+++ org.talend.designer.components.localprovider/components/templates/db_output_bulk.skeleton	(working copy)
@@ -139,7 +139,10 @@
             this.sqlStmt = sql;
         }
         public String getSqlStmt() {
-            return this.sqlStmt;
+            if (this.getColumn().getTalendType().equals("id_Geometry"))
+               return "GeomFromText(?, ?)";    // For PostGIS
+            else
+				return this.sqlStmt;
         }
         public void setValue(String value) {
             this.value = value;
@@ -1844,7 +1847,31 @@
                 setStmt.append("} else {\r\n");
                 setStmt.append(prefix + cid + ".setNull(" + index + ", java.sql.Types.TIMESTAMP);\r\n");
                 setStmt.append("}\r\n");
-            } else {
+            } else if(typeToGenerate.equals("Geometry")) {
+            	setStmt.append("if(" + incomingConnName + "." + column.getName() + " != null) {\r\n");
+                // Load geometry
+                setStmt.append(
+                                prefix +
+                                cid +
+                                ".setString(" + 
+                                    index +
+                                    ", ((org.talend.sdi.geometry.Geometry)(" +
+                                    incomingConnName + "." + column.getName() + ")).toString()" +
+                                    ");\r\n");
+                // TODO : should use forceCoordinate first, then getSRID method or -1 if it's null.
+                setStmt.append(
+                                prefix +
+                                cid +
+                                ".setInt(" + 
+                                    index + 
+                                    " + 1, ((org.talend.sdi.geometry.Geometry)(" + 
+                                    incomingConnName + "." + column.getName() + ")).getSRID()" +
+                                    ");\r\n");
+				setStmt.append("} else {\r\n");
+                setStmt.append(prefix + cid + ".setNull(" + index + ", java.sql.Types.VARCHAR);\r\n");
+                setStmt.append(prefix + cid + ".setNull(" + index + " + 1 , java.sql.Types.INTEGER);\r\n");
+                setStmt.append("}\r\n");                                    
+			} else {
                 setStmt.append(prefix + cid + ".set" + typeToGenerate + "(" + index + ", " + incomingConnName + "." + column.getName() + ");\r\n");
             }
             if(isObject) {
