Index: org.talend.librariesmanager/META-INF/MANIFEST.MF
===================================================================
--- org.talend.librariesmanager/META-INF/MANIFEST.MF	(revision 38739)
+++ org.talend.librariesmanager/META-INF/MANIFEST.MF	(working copy)
@@ -15,7 +15,8 @@
  org.eclipse.core.resources,
  org.eclipse.jdt.core,
  org.talend.commons.ui,
- org.eclipse.core.expressions
+ org.eclipse.core.expressions,
+ org.talend.libraries.sdi 
 Eclipse-LazyStart: true
 Export-Package: org.talend.librariesmanager.model,
  org.talend.librariesmanager.prefs,
Index: org.talend.librariesmanager/resources/java/routines/geo/OpenStreetMap.java
===================================================================
--- org.talend.librariesmanager/resources/java/routines/geo/OpenStreetMap.java	(revision 0)
+++ org.talend.librariesmanager/resources/java/routines/geo/OpenStreetMap.java	(revision 0)
@@ -0,0 +1,52 @@
+// ============================================================================
+//
+// Copyright (C) 2009 Fran√ßois
+//
+// This source code is available under agreement available at
+// %InstallDIR%\features\org.talend.rcp.branding.%PRODUCTNAME%\%PRODUCTNAME%license.txt
+//
+// You should have received a copy of the  agreement
+// along with this program; if not, write to Talend SA
+// 9 rue Pages 92150 Suresnes, France
+//   
+// ============================================================================
+package routines.geo;
+
+/**
+ * 
+ * @author fxprunarye
+ */
+public class OpenStreetMap {
+	private static String TAGS_SEPARATOR = ";";
+	private static String TAGVALUE_SEPARATOR = ":";
+
+	/**
+	 * GETTAG( ) Returns the tag value
+	 * 
+	 * {talendTypes} string | String
+	 * 
+	 * {Category} OpenStreetMap
+	 * 
+	 * {param} String(null)
+	 * 
+	 * {param} String(null)
+	 * 
+	 * {example} GETTAG(row1.tags, "name")
+	 * 
+	 */
+	public static String GETTAGVALUE(String tags, String tagName) {
+
+		int idx = tags.indexOf(tagName + TAGVALUE_SEPARATOR);
+		if (idx == -1)
+			return " ";
+
+		String value = tags.substring(idx + TAGVALUE_SEPARATOR.length()
+				+ tagName.length());
+		idx = value.indexOf(TAGS_SEPARATOR);
+
+		if (idx == -1)
+			return value;
+		else
+			return value.substring(0, idx);
+	}
+}
\ No newline at end of file
Index: org.talend.librariesmanager/resources/java/routines/geo/GeoOperation.java
===================================================================
--- org.talend.librariesmanager/resources/java/routines/geo/GeoOperation.java	(revision 0)
+++ org.talend.librariesmanager/resources/java/routines/geo/GeoOperation.java	(revision 0)
@@ -0,0 +1,302 @@
+// ============================================================================
+//
+// Copyright (C) 2007-2008 Camptocamp - www.camptocamp.com
+//                  2006-2007 Talend Inc. - www.talend.com
+//
+// This source code is available under agreement available at
+// %InstallDIR%\features\org.talend.rcp.branding.%PRODUCTNAME%\%PRODUCTNAME%license.txt
+//
+// You should have received a copy of the  agreement
+// along with this program; if not, write to Talend SA
+// 9 rue Pages 92150 Suresnes, France
+//   
+// ============================================================================
+package routines.geo;
+
+import org.talend.sdi.geometry.Geometry;
+import com.vividsolutions.jts.geom.Coordinate;
+import com.vividsolutions.jts.geom.GeometryFactory;
+import com.vividsolutions.jts.operation.distance.DistanceOp;
+
+/**
+ * 
+ * @author mcoudert
+ */
+public class GeoOperation {
+
+    /**
+     * INTERSECTS( ) Returns true if this geometry intersects the specified
+     * geometry.
+     * 
+     * {talendTypes} boolean | Boolean
+     * 
+     * {Category} GeoOperation
+     * 
+     * {param} Geometry(null)
+     * 
+     * {param} Geometry(null)
+     * 
+     * {example} INTERSECTS(null,null)
+     * 
+     */
+    public static boolean INTERSECTS(Geometry geom1, Geometry geom2) {
+	if (geom1.intersects(geom2) == true) {
+	    return true;
+	} else {
+	    return false;
+	}
+    }
+
+    /**
+     * TOUCHES( ) Returns true if this geometry touches the specified geometry.
+     * 
+     * {talendTypes} boolean | Boolean
+     * 
+     * {Category} GeoOperation
+     * 
+     * {param} Geometry(null)
+     * 
+     * {param} Geometry(null)
+     * 
+     * {example} TOUCHES(null,null)
+     * 
+     */
+    public static boolean TOUCHES(Geometry geom1, Geometry geom2) {
+	if (geom1.touches(geom2) == true) {
+	    return true;
+	} else {
+	    return false;
+	}
+    }
+
+    /**
+     * CROSSES( ) Returns true if this geometry crosses the specified geometry.
+     * 
+     * {talendTypes} boolean | Boolean
+     * 
+     * {Category} GeoOperation
+     * 
+     * {param} Geometry(null)
+     * 
+     * {param} Geometry(null)
+     * 
+     * {example} CROSSES(null,null)
+     * 
+     */
+    public static boolean CROSSES(Geometry geom1, Geometry geom2) {
+	if (geom1.crosses(geom2) == true) {
+	    return true;
+	} else {
+	    return false;
+	}
+    }
+
+    /**
+     * CONTAINS( ) Returns true if this Geometry contains the specified
+     * Geometry.
+     * 
+     * {talendTypes} boolean | Boolean
+     * 
+     * {Category} GeoOperation
+     * 
+     * {param} Geometry(null)
+     * 
+     * {param} Geometry(null)
+     * 
+     * {example} CONTAINS(null,null)
+     * 
+     */
+    public static boolean CONTAINS(Geometry geom1, Geometry geom2) {
+	if (geom1.contains(geom2) == true) {
+	    return true;
+	} else {
+	    return false;
+	}
+    }
+
+    /**
+     * WITHIN( ) Returns true if this Geometry is within the specified Geometry.
+     * 
+     * {talendTypes} boolean | Boolean
+     * 
+     * {Category} GeoOperation
+     * 
+     * {param} Geometry(null)
+     * 
+     * {param} Geometry(null)
+     * 
+     * {example} WITHIN(null,null)
+     * 
+     */
+    public static boolean WITHIN(Geometry geom1, Geometry geom2) {
+	if (geom1.within(geom2) == true) {
+	    return true;
+	} else {
+	    return false;
+	}
+    }
+
+    /**
+     * COVERS( ) Returns true if this Geometry covers the specified Geometry.
+     * 
+     * {talendTypes} boolean | Boolean
+     * 
+     * {Category} GeoOperation
+     * 
+     * {param} Geometry(null)
+     * 
+     * {param} Geometry(null)
+     * 
+     * {example} COVERS(null,null)
+     * 
+     */
+    public static boolean COVERS(Geometry geom1, Geometry geom2) {
+	if (geom1.covers(geom2) == true) {
+	    return true;
+	} else {
+	    return false;
+	}
+    }
+
+    /**
+     * COVEREDBY( ) Returns true if this Geometry is covered by the specified
+     * Geometry.
+     * 
+     * {talendTypes} boolean | Boolean
+     * 
+     * {Category} GeoOperation
+     * 
+     * {param} Geometry(null)
+     * 
+     * {param} Geometry(null)
+     * 
+     * {example} COVEREDBY(null,null)
+     * 
+     */
+    public static boolean COVEREDBY(Geometry geom1, Geometry geom2) {
+	if (geom1.coveredBy(geom2) == true) {
+	    return true;
+	} else {
+	    return false;
+	}
+    }
+
+    /**
+     * DISJOINT( ) Returns true if this Geometry is disjoint to the specified
+     * Geometry.
+     * 
+     * {talendTypes} boolean | Boolean
+     * 
+     * {Category} GeoOperation
+     * 
+     * {param} Geometry(null)
+     * 
+     * {param} Geometry(null)
+     * 
+     * {example} DISJOINT(null,null)
+     * 
+     */
+    public static boolean DISJOINT(Geometry geom1, Geometry geom2) {
+	if (geom1.disjoint(geom2) == true) {
+	    return true;
+	} else {
+	    return false;
+	}
+    }
+
+    /**
+     * OVERLAPS( ) Returns true if this Geometry overlaps the specified
+     * Geometry.
+     * 
+     * {talendTypes} boolean | Boolean
+     * 
+     * {Category} GeoOperation
+     * 
+     * {param} Geometry(null)
+     * 
+     * {param} Geometry(null)
+     * 
+     * {example} OVERLAPS(null,null)
+     * 
+     */
+    public static boolean OVERLAPS(Geometry geom1, Geometry geom2) {
+	if (geom1.overlaps(geom2) == true) {
+	    return true;
+	} else {
+	    return false;
+	}
+    }
+
+    /**
+     * GETDISTANCE( ) Returns the distance of the closest point of two geometries.
+     * 
+     * {talendTypes} double | Double
+     * 
+     * {Category} GeoOperation
+     * 
+     * {param} Geometry(row1.the_geom)
+     * 
+     * {param} Geometry(row2.the_geom)
+     * 
+     * {example} GETDISTANCE(row1.the_geom, row2.the_geom)
+     * 
+     */
+    public static double GETDISTANCE(Geometry geom1, Geometry geom2) {
+	    return com.vividsolutions.jts.operation.distance.DistanceOp.distance(
+			geom1._getInternalGeometry(), 
+			geom2._getInternalGeometry()
+		);
+    }
+
+    /**
+     * ISWITHINDISTANCE( ) Returns true if the two geometries lie within a given distance of each other.
+     * 
+     * {talendTypes} boolean | Boolean
+     * 
+     * {Category} GeoOperation
+     * 
+     * {param} Geometry(row1.the_geom)
+     * 
+     * {param} Geometry(row2.the_geom)
+     *
+     * {param} double(0.2)
+     * 
+     * {example} ISWITHINDISTANCE(row1.the_geom, row2.the_geom, 0.2)
+     * 
+     */
+    public static boolean ISWITHINDISTANCE(Geometry geom1, Geometry geom2, double distance) {
+	    return com.vividsolutions.jts.operation.distance.DistanceOp.isWithinDistance(
+			geom1._getInternalGeometry(), 
+			geom2._getInternalGeometry(),
+			distance
+		);
+    }
+
+    /**
+     * GETCLOSESTPOINT( ) Returns the closest point of first geometry.
+     * 
+     * {talendTypes} geometry | Geometry
+     * 
+     * {Category} GeoOperation
+     * 
+     * {param} Geometry(row1.the_geom)
+     * 
+     * {param} Geometry(row2.the_geom)
+     * 
+     * {example} GETCLOSESTPOINT(row1.the_geom, row2.the_geom)
+     * 
+     */
+    public static Geometry GETCLOSESTPOINT(Geometry geom1, Geometry geom2) {
+	Coordinate[] coords = DistanceOp.closestPoints(
+			geom1._getInternalGeometry(), 
+			geom2._getInternalGeometry()
+		);
+	
+	// TODO handle precision model and SRID
+	GeometryFactory gf = new GeometryFactory(); 
+	com.vividsolutions.jts.geom.Geometry point = gf.createPoint(coords[0]);
+	org.talend.sdi.geometry.Geometry geom = new org.talend.sdi.geometry.Geometry(point);
+
+	return geom;
+    }
+}
Index: org.talend.librariesmanager/resources/java/routines/geo/GeometryOperation.java
===================================================================
--- org.talend.librariesmanager/resources/java/routines/geo/GeometryOperation.java	(revision 0)
+++ org.talend.librariesmanager/resources/java/routines/geo/GeometryOperation.java	(revision 0)
@@ -0,0 +1,465 @@
+// ============================================================================
+//
+// Copyright (C) 2007-2008 Camptocamp - www.camptocamp.com
+//				 2006-2007 Talend Inc. - www.talend.com
+//
+// This source code is available under agreement available at
+// %InstallDIR%\features\org.talend.rcp.branding.%PRODUCTNAME%\%PRODUCTNAME%license.txt
+//
+// You should have received a copy of the  agreement
+// along with this program; if not, write to Talend SA
+// 9 rue Pages 92150 Suresnes, France
+//   
+// ============================================================================
+package routines.geo;
+
+import org.talend.sdi.geometry.Geometry;
+
+import com.vividsolutions.jts.geom.Coordinate;
+
+/**
+ * Provide operations on geometry to be process mainly in expression of a tMap component. 
+ * 
+ * @author mcoudert
+ * @author fxprunayre
+ */
+public class GeometryOperation {
+
+    /**
+     * GETLENGTH( ) Returns the length of the specified geometry.
+     * 
+     * {talendTypes} double | Double
+     * 
+     * {Category} GeometryOperation
+     * 
+     * {param} Geometry(null)
+     * 
+     * {example} GETAREA(null)
+     * 
+     */
+    public static Double GETLENGTH(Geometry geom) {
+	return geom.getLength();
+    }
+
+    /**
+     * GETAREA( ) Returns the area of the specified geometry.
+     * 
+     * {talendTypes} double | Double
+     * 
+     * {Category} GeometryOperation
+     * 
+     * {param} Geometry(null)
+     * 
+     * {example} GETAREA(null)
+     * 
+     */
+    public static Double GETAREA(Geometry geom) {
+	return geom.getArea();
+    }
+
+    /**
+     * GETNUMPOINTS( ) Returns the number of points in the specified geometry.
+     * 
+     * {talendTypes} int | Int
+     * 
+     * {Category} GeometryOperation
+     * 
+     * {param} Geometry(null)
+     * 
+     * {example} GETNUMPOINTS(null)
+     * 
+     */
+    public static int GETNUMPOINTS(Geometry geom) {
+	return geom.getNumPoints();
+    }
+
+    /**
+     * GETNUMGEOMETRIES( ) Returns the number of geometries in the specified
+     * geometry.
+     * 
+     * {talendTypes} int | Int
+     * 
+     * {Category} GeometryOperation
+     * 
+     * {param} Geometry(null)
+     * 
+     * {example} GETNUMGEOMETRIES(null)
+     * 
+     */
+    public static int GETNUMGEOMETRIES(Geometry geom) {
+	return geom.getNumGeometries();
+    }
+
+    /**
+     * GETGEOMETRYTYPE( ) Returns the type of the specified geometry.
+     * 
+     * {talendTypes} string | String
+     * 
+     * {Category} GeometryOperation
+     * 
+     * {param} Geometry(null)
+     * 
+     * {example} GETGEOMETRYTYPE(null)
+     * 
+     */
+    public static String GETGEOMETRYTYPE(Geometry geom) {
+	return geom.getGeometryType();
+    }
+
+    /**
+     * GETSRID( ) Returns the SRID of the specified geometry.
+     * 
+     * {talendTypes} int | Int
+     * 
+     * {Category} GeometryOperation
+     * 
+     * {param} Geometry(null)
+     * 
+     * {example} GETSRID(null)
+     * 
+     */
+    public static int GETSRID(Geometry geom) {
+	return geom.getSRID();
+    }
+
+    /**
+     * EQUALS( ) Returns true if the two geometries are equal.
+     * 
+     * {talendTypes} boolean | Boolean
+     * 
+     * {Category} GeometryOperation
+     * 
+     * {param} Geometry(null)
+     * 
+     * {param} Geometry(null)
+     * 
+     * {example} EQUALS(null, null)
+     * 
+     */
+    public static boolean EQUALS(Geometry geom1, Geometry geom2) {
+	return geom1.equals(geom2);
+    }
+
+    /**
+     * DISTANCE( ) Returns the distance between the two geometries.
+     * 
+     * {talendTypes} double | Double
+     * 
+     * {Category} GeometryOperation
+     * 
+     * {param} Geometry(null)
+     * 
+     * {param} Geometry(null)
+     * 
+     * {example} DISTANCE(null, null)
+     * 
+     */
+    public static double DISTANCE(Geometry geom1, Geometry geom2) {
+	return geom1.distance(geom2);
+    }
+
+    /**
+     * GETCENTROID( ) Returns the centroid of the specified geometry.
+     * 
+     * {talendTypes} geometry | Geometry
+     * 
+     * {Category} GeometryOperation
+     * 
+     * {param} Geometry(null)
+     * 
+     * {example} GETCENTROID(null)
+     * 
+     */
+    public static Geometry GETCENTROID(Geometry geom) {
+	return geom.getCentroid();
+    }
+
+    /**
+     * GETINTERIORPOINT( ) Returns a point located inside the specified
+     * geometry.
+     * 
+     * {talendTypes} geometry | Geometry
+     * 
+     * {Category} GeometryOperation
+     * 
+     * {param} Geometry(null)
+     * 
+     * {example} GETINTERIORPOINT(null)
+     * 
+     */
+    public static Geometry GETINTERIORPOINT(Geometry geom) {
+	return geom.getInteriorPoint();
+    }
+
+    /**
+     * GETENVELOPE( ) Returns the envelope of the specified geometry.
+     * 
+     * {talendTypes} geometry | Geometry
+     * 
+     * {Category} GeometryOperation
+     * 
+     * {param} Geometry(null)
+     * 
+     * {example} GETENVELOPE(null)
+     * 
+     */
+    public static Geometry GETENVELOPE(Geometry geom) {
+	return geom.getEnvelope();
+    }
+
+    /**
+     * GETBOUNDARY( ) Returns the boundary of the specified geometry.
+     * 
+     * {talendTypes} geometry | Geometry
+     * 
+     * {Category} GeometryOperation
+     * 
+     * {param} Geometry(null)
+     * 
+     * {example} GETBOUNDARY(null)
+     * 
+     */
+    public static Geometry GETBOUNDARY(Geometry geom) {
+	return geom.getBoundary();
+    }
+
+    /**
+     * GETCONVEXHULL( ) Returns the convex hull polygon of the specified
+     * geometry.
+     * 
+     * {talendTypes} geometry | Geometry
+     * 
+     * {Category} GeometryOperation
+     * 
+     * {param} Geometry(null)
+     * 
+     * {example} GETCONVEXHULL(null)
+     * 
+     */
+    public static Geometry GETCONVEXHULL(Geometry geom) {
+	return geom.convexHull();
+    }
+
+    /**
+     * GETGEOMETRYN( ) Returns the n th geometries of the specified geometry.
+     * 
+     * {talendTypes} geometry | Geometry
+     * 
+     * {Category} GeometryOperation
+     * 
+     * {param} Geometry(null)
+     * 
+     * {param} int(null)
+     * 
+     * {example} GETGEOMETRYN(null, null)
+     * 
+     */
+    public static Geometry GETGEOMETRYN(Geometry geom, int n) {
+	return geom.getGeometryN(n);
+    }
+
+    /**
+     * GETCOORDINATE( ) Returns the x, y or z coordinate of the n th coordinate
+     * of the specified geometry. 0 is first coordinate. If n equals -1, then
+     * the last pair of coordinate is returned. If n is greater than the number
+     * of coordinates, -1 is returned.
+     * 
+     * {talendTypes} geometry | Geometry
+     * 
+     * {Category} GeometryOperation
+     * 
+     * {param} Geometry(null)
+     * 
+     * {param} int(-1) pair of coordinates
+     * 
+     * {param} String("X") "X", "Y" or "Z" value
+     * 
+     * {example} GETCOORDINATE(null, -1, "X")
+     * 
+     */
+    public static double GETCOORDINATE(Geometry geom, int n, String xyz) {
+	Coordinate[] coords = geom.getCoordinates();
+
+	// return last one
+	if (n == -1)
+	    if (xyz.equalsIgnoreCase("X"))
+		return coords[coords.length - 1].x;
+	    else if (xyz.equalsIgnoreCase("Y"))
+		return coords[coords.length - 1].y;
+	    else
+		return coords[coords.length - 1].z;
+
+	// Not so many points
+	if (n >= coords.length)
+	    return -1;
+
+	if (xyz.equalsIgnoreCase("X"))
+	    return coords[n].x;
+	else if (xyz.equalsIgnoreCase("Y"))
+	    return coords[n].y;
+	else
+	    return coords[n].z;
+    }
+
+    /**
+     * SIMPLIFY( ) Returns a simplified geometry.
+     * 
+     * {talendTypes} geometry | Geometry
+     * 
+     * {Category} GeometryOperation
+     * 
+     * {param} Geometry(null)
+     * 
+     * {param} String("DouglasPeuckerSimplifier") Type, values:
+     * "DouglasPeuckerSimplifier", "TopologyPreservingSimplifier"
+     * 
+     * {param} double(1) tolerance
+     * 
+     * {example} SIMPLIFY(null, "", 1)
+     * 
+     */
+    public static Geometry SIMPLIFY(Geometry geom, String type, double tolerance) {
+	return geom.simplify(type, tolerance);
+    }
+
+    /**
+     * GETBUFFER( ) Returns the buffer of the specified geometry.
+     * 
+     * {talendTypes} geometry | Geometry
+     * 
+     * {Category} GeometryOperation
+     * 
+     * {param} Geometry(null)
+     * 
+     * {param} double(1) distance
+     * 
+     * {param} int(8) Quadrant segments, default 8
+     * 
+     * {param} String("BUTT") End cap style, values: "ROUND", "SQUARE", "BUTT",
+     * "FLAT"
+     * 
+     * {example} GETBUFFER(null, 8, null)
+     * 
+     */
+    public static Geometry GETBUFFER(Geometry geom, double d, int quantization,
+	    String endCapStyle) {
+	int ecs = com.vividsolutions.jts.operation.buffer.BufferOp.CAP_BUTT;
+
+	if (endCapStyle != null) {
+	    if (endCapStyle.equals("ROUND"))
+		ecs = com.vividsolutions.jts.operation.buffer.BufferOp.CAP_ROUND;
+	    else if (endCapStyle.equals("SQUARE"))
+		ecs = com.vividsolutions.jts.operation.buffer.BufferOp.CAP_SQUARE;
+	    else if (endCapStyle.equals("FLAT"))
+		ecs = com.vividsolutions.jts.operation.buffer.BufferOp.CAP_FLAT;
+	}
+
+	return geom.buffer(d, quantization, ecs);
+    }
+
+    /**
+     * INTERSECTION( ) Returns the intersection of the two geometries specified.
+     * 
+     * {talendTypes} geometry | Geometry
+     * 
+     * {Category} GeometryOperation
+     * 
+     * {param} Geometry(null)
+     * 
+     * {param} Geometry(null)
+     * 
+     * {example} INTERSECTION(null)
+     * 
+     */
+    public static Geometry INTERSECTION(Geometry geom, Geometry geom1) {
+	return geom.intersection(geom1);
+    }
+
+    /**
+     * UNION( ) Returns the union of the two geometries specified.
+     * 
+     * {talendTypes} geometry | Geometry
+     * 
+     * {Category} GeometryOperation
+     * 
+     * {param} Geometry(null)
+     * 
+     * {param} Geometry(null)
+     * 
+     * {example} UNION(null)
+     * 
+     */
+    public static Geometry UNION(Geometry geom, Geometry geom1) {
+	return geom.union(geom1);
+    }
+
+    /**
+     * SYMDIFFERENCE( ) Returns the sym difference of the two geometries
+     * specified.
+     * 
+     * {talendTypes} geometry | Geometry
+     * 
+     * {Category} GeometryOperation
+     * 
+     * {param} Geometry(null)
+     * 
+     * {param} Geometry(null)
+     * 
+     * {example} SYMDIFFERENCE(null)
+     * 
+     */
+    public static Geometry SYMDIFFERENCE(Geometry geom, Geometry geom1) {
+	return geom.symDifference(geom1);
+    }
+
+    /**
+     * DIFFERENCE( ) Returns the difference of the two geometries specified.
+     * 
+     * {talendTypes} geometry | Geometry
+     * 
+     * {Category} GeometryOperation
+     * 
+     * {param} Geometry(null)
+     * 
+     * {param} Geometry(null)
+     * 
+     * {example} DIFFERENCE(null)
+     * 
+     */
+    public static Geometry DIFFERENCE(Geometry geom, Geometry geom1) {
+	return geom.difference(geom1);
+    }
+
+    /**
+     * ISVALID( ) Returns if the geometry is valid or not.
+     * 
+     * {talendTypes} string | String
+     * 
+     * {Category} GeometryOperation
+     * 
+     * {param} Geometry(null)
+     * 
+     * {example} ISVALID(null)
+     * 
+     */
+    public static String ISVALID(Geometry geom) {
+	return geom.isValid();
+    }
+
+    /**
+     * TOWKT( ) Returns the WKT representation of the geometry.
+     * 
+     * {talendTypes} string | String
+     * 
+     * {Category} GeometryOperation
+     * 
+     * {param} Geometry(null)
+     * 
+     * {example} TOWKT(null)
+     * 
+     */
+    public static String TOWKT(Geometry geom) {
+	return geom.toString();
+    }
+
+}
