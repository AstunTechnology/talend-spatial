<%@ jet
imports="
    org.talend.core.model.process.INode
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
    java.util.Map
    java.util.ArrayList
    org.talend.commons.utils.StringUtils
    org.talend.core.model.process.IConnection
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.process.EConnectionType
    org.talend.core.model.metadata.types.JavaTypesManager
"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

String route = ElementParameterParser.getValue(node, "__ROUTE__");
String dem = ElementParameterParser.getValue(node, "__DEM__");
List<Map<String, String>> layers = (List<Map<String, String>>) ElementParameterParser.getObjectValue(node, "__LAYERS__");
String profilepoints_out = ElementParameterParser.getValue(node, "__PROFILEPOINTS_OUT__");

%>

<%
if (!"\"\"".equals(route)) {
%>
// Create a vector layer
java.io.File file_<%=cid %>_route = new java.io.File( <%=route %> );
java.util.Map connect_<%=cid %>_route = new java.util.HashMap();
connect_<%=cid %>_route.put("url", file_<%=cid %>_route.toURL() );
org.geotools.data.DataStore ds_<%=cid %>_route = org.geotools.data.DataStoreFinder.getDataStore( connect_<%=cid %>_route );
es.unex.sextante.geotools.GTVectorLayer layer_<%=cid %>_route = es.unex.sextante.geotools.GTVectorLayer.createLayer(ds_<%=cid %>_route, ds_<%=cid %>_route.getTypeNames()[0]);
<%
}
%>
<%
if (!"\"\"".equals(dem)) {
%>
// Create a RASTER coverage
es.unex.sextante.geotools.GTRasterLayer layer_<%=cid %>_dem = new es.unex.sextante.geotools.GTRasterLayer();
java.net.URL url_<%=cid %>_dem = new java.io.File(<%=dem %>).toURL();
org.geotools.gce.arcgrid.ArcGridReader agr_<%=cid %>_dem = new org.geotools.gce.arcgrid.ArcGridReader(url_<%=cid %>_dem);
org.geotools.coverage.grid.GridCoverage2D coverage_<%=cid %>_dem = (org.geotools.coverage.grid.GridCoverage2D) agr_<%=cid %>_dem.read(null);
layer_<%=cid %>_dem.create(coverage_<%=cid %>_dem);
layer_<%=cid %>_dem.setName("DEM");
<%
}
%>
<%
if (!"\"\"".equals(layers)) {
%>
java.util.ArrayList<Object> layers_<%=cid %> = new java.util.ArrayList<Object>();
<%
for (int i=0; i<layers.size(); i++) {
  Map<String, String> current = layers.get(i);
  String currentfile = current.get("LAYERS");
%>
// Create a RASTER coverage
es.unex.sextante.geotools.GTRasterLayer layer_<%=cid %>_layers_current<%=i %> = new es.unex.sextante.geotools.GTRasterLayer();
java.net.URL url_<%=cid %>_layers_current<%=i %> = new java.io.File(<%=currentfile %>).toURL();
org.geotools.gce.arcgrid.ArcGridReader agr_<%=cid %>_layers_current<%=i %> = new org.geotools.gce.arcgrid.ArcGridReader(url_<%=cid %>_layers_current<%=i %>);
org.geotools.coverage.grid.GridCoverage2D coverage_<%=cid %>_layers_current<%=i %> = (org.geotools.coverage.grid.GridCoverage2D) agr_<%=cid %>_layers_current<%=i %>.read(null);
layer_<%=cid %>_layers_current<%=i %>.create(coverage_<%=cid %>_layers_current<%=i %>);
layer_<%=cid %>_layers_current<%=i %>.setName("layers_current<%=i %>");
layers_<%=cid %>.add(layer_<%=cid %>_layers_current<%=i %>);

<%
}
%>
<%
}
%>


es.unex.sextante.profiles.profile.ProfileAlgorithm alg_<%=cid %> = new es.unex.sextante.profiles.profile.ProfileAlgorithm();


es.unex.sextante.core.ParametersSet params_<%=cid %> = alg_<%=cid %>.getParameters();
<%
if (!"\"\"".equals(route)) {
%>
params_<%=cid %>.getParameter(es.unex.sextante.profiles.profile.ProfileAlgorithm.ROUTE).setParameterValue(layer_<%=cid %>_route);
<%
}
%>
<%
if (!"\"\"".equals(dem)) {
%>
params_<%=cid %>.getParameter(es.unex.sextante.profiles.profile.ProfileAlgorithm.DEM).setParameterValue(layer_<%=cid %>_dem);
<%
}
%>
<%
if (!"\"\"".equals(layers)) {
%>
params_<%=cid %>.getParameter("LAYERS").setParameterValue(layers_<%=cid %>);
<%
}
%>


// Output objects ...
es.unex.sextante.core.OutputObjectsSet outputs_<%=cid %> = alg_<%=cid %>.getOutputObjects();
es.unex.sextante.outputs.Output af_<%=cid %>_profilepoints_out = outputs_<%=cid %>.getOutput(es.unex.sextante.profiles.profile.ProfileAlgorithm.PROFILEPOINTS);
af_<%=cid %>_profilepoints_out.setOutputChannel(new es.unex.sextante.outputs.FileOutputChannel(<%=profilepoints_out%>));
globalMap.put("<%=cid %>_PROFILEPOINTS_OUT", <%=profilepoints_out%>);
//if (alg_<%=cid %>.getUserCanDefineOutputExtent()) {
// TODO : get Extent
//}
// TODO Unsupported type: GRAPH[OutputChart]


es.unex.sextante.geotools.GTOutputFactory outputFactory_<%=cid %> = new es.unex.sextante.geotools.GTOutputFactory();
try {
alg_<%=cid %>.execute(null, outputFactory_<%=cid %>);
} catch (Exception e) {
  e.printStackTrace();
}


