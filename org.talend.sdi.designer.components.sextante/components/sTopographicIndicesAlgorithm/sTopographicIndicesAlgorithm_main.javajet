<%@ jet
imports="
    org.talend.core.model.process.INode
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
    java.util.Map
    java.util.ArrayList
    org.talend.commons.utils.StringUtils
    org.talend.core.model.process.IConnection
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.process.EConnectionType
    org.talend.core.model.metadata.types.JavaTypesManager
"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

String slope = ElementParameterParser.getValue(node, "__SLOPE__");
String accflow = ElementParameterParser.getValue(node, "__ACCFLOW__");
String twi_out = ElementParameterParser.getValue(node, "__TWI_OUT__");
String spi_out = ElementParameterParser.getValue(node, "__SPI_OUT__");
String ls_out = ElementParameterParser.getValue(node, "__LS_OUT__");

%>

<%
if (!"\"\"".equals(slope)) {
%>
// Create a RASTER coverage
es.unex.sextante.geotools.GTRasterLayer layer_<%=cid %>_slope = new es.unex.sextante.geotools.GTRasterLayer();
java.net.URL url_<%=cid %>_slope = new java.io.File(<%=slope %>).toURL();
org.geotools.gce.arcgrid.ArcGridReader agr_<%=cid %>_slope = new org.geotools.gce.arcgrid.ArcGridReader(url_<%=cid %>_slope);
org.geotools.coverage.grid.GridCoverage2D coverage_<%=cid %>_slope = (org.geotools.coverage.grid.GridCoverage2D) agr_<%=cid %>_slope.read(null);
layer_<%=cid %>_slope.create(coverage_<%=cid %>_slope);
layer_<%=cid %>_slope.setName("SLOPE");
<%
}
%>
<%
if (!"\"\"".equals(accflow)) {
%>
// Create a RASTER coverage
es.unex.sextante.geotools.GTRasterLayer layer_<%=cid %>_accflow = new es.unex.sextante.geotools.GTRasterLayer();
java.net.URL url_<%=cid %>_accflow = new java.io.File(<%=accflow %>).toURL();
org.geotools.gce.arcgrid.ArcGridReader agr_<%=cid %>_accflow = new org.geotools.gce.arcgrid.ArcGridReader(url_<%=cid %>_accflow);
org.geotools.coverage.grid.GridCoverage2D coverage_<%=cid %>_accflow = (org.geotools.coverage.grid.GridCoverage2D) agr_<%=cid %>_accflow.read(null);
layer_<%=cid %>_accflow.create(coverage_<%=cid %>_accflow);
layer_<%=cid %>_accflow.setName("ACCFLOW");
<%
}
%>


es.unex.sextante.hydrology.topographicIndices.TopographicIndicesAlgorithm alg_<%=cid %> = new es.unex.sextante.hydrology.topographicIndices.TopographicIndicesAlgorithm();


es.unex.sextante.core.ParametersSet params_<%=cid %> = alg_<%=cid %>.getParameters();
<%
if (!"\"\"".equals(slope)) {
%>
params_<%=cid %>.getParameter(es.unex.sextante.hydrology.topographicIndices.TopographicIndicesAlgorithm.SLOPE).setParameterValue(layer_<%=cid %>_slope);
<%
}
%>
<%
if (!"\"\"".equals(accflow)) {
%>
params_<%=cid %>.getParameter(es.unex.sextante.hydrology.topographicIndices.TopographicIndicesAlgorithm.ACCFLOW).setParameterValue(layer_<%=cid %>_accflow);
<%
}
%>


// Output objects ...
es.unex.sextante.core.OutputObjectsSet outputs_<%=cid %> = alg_<%=cid %>.getOutputObjects();
es.unex.sextante.outputs.Output af_<%=cid %>_twi_out = outputs_<%=cid %>.getOutput(es.unex.sextante.hydrology.topographicIndices.TopographicIndicesAlgorithm.TWI);
af_<%=cid %>_twi_out.setOutputChannel(new es.unex.sextante.outputs.FileOutputChannel(<%=twi_out%>));
globalMap.put("<%=cid %>_TWI_OUT", <%=twi_out%>);
//if (alg_<%=cid %>.getUserCanDefineOutputExtent()) {
// TODO : get Extent
//}
es.unex.sextante.outputs.Output af_<%=cid %>_spi_out = outputs_<%=cid %>.getOutput(es.unex.sextante.hydrology.topographicIndices.TopographicIndicesAlgorithm.SPI);
af_<%=cid %>_spi_out.setOutputChannel(new es.unex.sextante.outputs.FileOutputChannel(<%=spi_out%>));
globalMap.put("<%=cid %>_SPI_OUT", <%=spi_out%>);
//if (alg_<%=cid %>.getUserCanDefineOutputExtent()) {
// TODO : get Extent
//}
es.unex.sextante.outputs.Output af_<%=cid %>_ls_out = outputs_<%=cid %>.getOutput(es.unex.sextante.hydrology.topographicIndices.TopographicIndicesAlgorithm.LS);
af_<%=cid %>_ls_out.setOutputChannel(new es.unex.sextante.outputs.FileOutputChannel(<%=ls_out%>));
globalMap.put("<%=cid %>_LS_OUT", <%=ls_out%>);
//if (alg_<%=cid %>.getUserCanDefineOutputExtent()) {
// TODO : get Extent
//}


es.unex.sextante.geotools.GTOutputFactory outputFactory_<%=cid %> = new es.unex.sextante.geotools.GTOutputFactory();
try {
alg_<%=cid %>.execute(null, outputFactory_<%=cid %>);
} catch (Exception e) {
  e.printStackTrace();
}


