<%@ jet
imports="
    org.talend.core.model.process.INode
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
    java.util.Map
    java.util.ArrayList
    java.io.IOException
    org.talend.commons.utils.StringUtils
    org.talend.core.model.process.IConnection
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.process.EConnectionType
    org.talend.core.model.metadata.types.JavaTypesManager
"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
String out = ElementParameterParser.getValue(node, "__OUTPUT__");

List< ? extends IConnection> conns = node.getIncomingConnections();
for (IConnection conn : conns) {
    if ((conn.getLineStyle().equals(EConnectionType.FLOW_MAIN))) {
%>

		// Write a tiff file
		org.geotools.coverage.grid.GridCoverage2D grid_<%=cid %> = 
			(org.geotools.coverage.grid.GridCoverage2D) <%=conn.getName() %>.RASTER;
			
		// FIXME : should only use GeoTools
		es.unex.sextante.geotools.GTRasterLayer rl_<%=cid %> = 
		    new es.unex.sextante.geotools.GTRasterLayer();
		rl_<%=cid %>.create(grid_<%=cid %>);
		
       	try{
            java.io.FileWriter f = new java.io.FileWriter(<%=out %>);
            java.io.BufferedWriter fout = new java.io.BufferedWriter(f);
            java.text.DecimalFormat df = new java.text.DecimalFormat("##.###");
            df.setDecimalFormatSymbols(new java.text.DecimalFormatSymbols(java.util.Locale.US));
            df.setDecimalSeparatorAlwaysShown(true);

			es.unex.sextante.rasterWrappers.GridExtent layerExtent = rl_<%=cid %>.getLayerGridExtent();
            fout.write("ncols " + Integer.toString(layerExtent.getNX()));
            fout.newLine();
            fout.write("nrows " + Integer.toString(layerExtent.getNY()));
            fout.newLine();
            fout.write("xllcorner " + Double.toString(layerExtent.getXMin()));
            fout.newLine();
            fout.write("yllcorner " + Double.toString(layerExtent.getYMin()));
            fout.newLine();
            fout.write("cellsize " + Double.toString(layerExtent.getCellSize()));
            fout.newLine();
            fout.write("nodata_value " + Double.toString(rl_<%=cid %>.getNoDataValue()));
            fout.newLine();

            for (int i = 0; i < layerExtent.getNY(); i++) {
                for (int j = 0; j < layerExtent.getNX(); j++) {
                    double value = rl_<%=cid %>.getCellValueInLayerCoords(j, i, 0);
                    fout.write(df.format(value) + " ");
                }
                fout.newLine();
            }
            fout.close();
            f.close();
        }catch(Exception e){}



/*		try{
			org.geotools.gce.geotiff.GeoTiffWriter writer_<%=cid %> = new org.geotools.gce.geotiff.GeoTiffWriter(new java.io.File(<%=out %>));
			org.geotools.coverage.grid.GridCoverage2D gc_<%=cid %> = (org.geotools.coverage.grid.GridCoverage2D) globalMap.get("<%=conn.getSource().getUniqueName() %>.RASTER");
			writer_<%=cid %>.write(gc_<%=cid %>.geophysics(true), null);
			writer_<%=cid %>.dispose();		
		}catch(java.io.IOException e){
		}catch(Exception e){}*/
<%
	}
}
%>
