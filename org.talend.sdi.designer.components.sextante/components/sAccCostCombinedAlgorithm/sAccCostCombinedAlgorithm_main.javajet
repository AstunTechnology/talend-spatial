<%@ jet
imports="
    org.talend.core.model.process.INode
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
    java.util.Map
    java.util.ArrayList
    org.talend.commons.utils.StringUtils
    org.talend.core.model.process.IConnection
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.process.EConnectionType
    org.talend.core.model.metadata.types.JavaTypesManager
"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

String isocost = ElementParameterParser.getValue(node, "__ISOCOST__");
String anisocost = ElementParameterParser.getValue(node, "__ANISOCOST__");
String costdir = ElementParameterParser.getValue(node, "__COSTDIR__");
String features = ElementParameterParser.getValue(node, "__FEATURES__");
String kfactor = ElementParameterParser.getValue(node, "__KFACTOR__");
String acccost_out = ElementParameterParser.getValue(node, "__ACCCOST_OUT__");
String closestpoint_out = ElementParameterParser.getValue(node, "__CLOSESTPOINT_OUT__");

%>

<%
if (!"\"\"".equals(isocost)) {
%>
// Create a RASTER coverage
es.unex.sextante.geotools.GTRasterLayer layer_<%=cid %>_isocost = new es.unex.sextante.geotools.GTRasterLayer();
java.net.URL url_<%=cid %>_isocost = new java.io.File(<%=isocost %>).toURL();
org.geotools.gce.arcgrid.ArcGridReader agr_<%=cid %>_isocost = new org.geotools.gce.arcgrid.ArcGridReader(url_<%=cid %>_isocost);
org.geotools.coverage.grid.GridCoverage2D coverage_<%=cid %>_isocost = (org.geotools.coverage.grid.GridCoverage2D) agr_<%=cid %>_isocost.read(null);
layer_<%=cid %>_isocost.create(coverage_<%=cid %>_isocost);
layer_<%=cid %>_isocost.setName("ISOCOST");
<%
}
%>
<%
if (!"\"\"".equals(anisocost)) {
%>
// Create a RASTER coverage
es.unex.sextante.geotools.GTRasterLayer layer_<%=cid %>_anisocost = new es.unex.sextante.geotools.GTRasterLayer();
java.net.URL url_<%=cid %>_anisocost = new java.io.File(<%=anisocost %>).toURL();
org.geotools.gce.arcgrid.ArcGridReader agr_<%=cid %>_anisocost = new org.geotools.gce.arcgrid.ArcGridReader(url_<%=cid %>_anisocost);
org.geotools.coverage.grid.GridCoverage2D coverage_<%=cid %>_anisocost = (org.geotools.coverage.grid.GridCoverage2D) agr_<%=cid %>_anisocost.read(null);
layer_<%=cid %>_anisocost.create(coverage_<%=cid %>_anisocost);
layer_<%=cid %>_anisocost.setName("ANISOCOST");
<%
}
%>
<%
if (!"\"\"".equals(costdir)) {
%>
// Create a RASTER coverage
es.unex.sextante.geotools.GTRasterLayer layer_<%=cid %>_costdir = new es.unex.sextante.geotools.GTRasterLayer();
java.net.URL url_<%=cid %>_costdir = new java.io.File(<%=costdir %>).toURL();
org.geotools.gce.arcgrid.ArcGridReader agr_<%=cid %>_costdir = new org.geotools.gce.arcgrid.ArcGridReader(url_<%=cid %>_costdir);
org.geotools.coverage.grid.GridCoverage2D coverage_<%=cid %>_costdir = (org.geotools.coverage.grid.GridCoverage2D) agr_<%=cid %>_costdir.read(null);
layer_<%=cid %>_costdir.create(coverage_<%=cid %>_costdir);
layer_<%=cid %>_costdir.setName("COSTDIR");
<%
}
%>
<%
if (!"\"\"".equals(features)) {
%>
// Create a RASTER coverage
es.unex.sextante.geotools.GTRasterLayer layer_<%=cid %>_features = new es.unex.sextante.geotools.GTRasterLayer();
java.net.URL url_<%=cid %>_features = new java.io.File(<%=features %>).toURL();
org.geotools.gce.arcgrid.ArcGridReader agr_<%=cid %>_features = new org.geotools.gce.arcgrid.ArcGridReader(url_<%=cid %>_features);
org.geotools.coverage.grid.GridCoverage2D coverage_<%=cid %>_features = (org.geotools.coverage.grid.GridCoverage2D) agr_<%=cid %>_features.read(null);
layer_<%=cid %>_features.create(coverage_<%=cid %>_features);
layer_<%=cid %>_features.setName("FEATURES");
<%
}
%>
<%
if (!"\"\"".equals(kfactor)) {
%>
<%
}
%>


es.unex.sextante.gridAnalysis.accCostCombined.AccCostCombinedAlgorithm alg_<%=cid %> = new es.unex.sextante.gridAnalysis.accCostCombined.AccCostCombinedAlgorithm();


es.unex.sextante.core.ParametersSet params_<%=cid %> = alg_<%=cid %>.getParameters();
<%
if (!"\"\"".equals(isocost)) {
%>
params_<%=cid %>.getParameter(es.unex.sextante.gridAnalysis.accCostCombined.AccCostCombinedAlgorithm.ISOCOST).setParameterValue(layer_<%=cid %>_isocost);
<%
}
%>
<%
if (!"\"\"".equals(anisocost)) {
%>
params_<%=cid %>.getParameter(es.unex.sextante.gridAnalysis.accCostCombined.AccCostCombinedAlgorithm.ANISOCOST).setParameterValue(layer_<%=cid %>_anisocost);
<%
}
%>
<%
if (!"\"\"".equals(costdir)) {
%>
params_<%=cid %>.getParameter(es.unex.sextante.gridAnalysis.accCostCombined.AccCostCombinedAlgorithm.COSTDIR).setParameterValue(layer_<%=cid %>_costdir);
<%
}
%>
<%
if (!"\"\"".equals(features)) {
%>
params_<%=cid %>.getParameter(es.unex.sextante.gridAnalysis.accCostCombined.AccCostCombinedAlgorithm.FEATURES).setParameterValue(layer_<%=cid %>_features);
<%
}
%>
<%
if (!"\"\"".equals(kfactor)) {
%>
params_<%=cid %>.getParameter("KFACTOR").setParameterValue(Double.valueOf(<%=kfactor%>));
<%
}
%>


// Output objects ...
es.unex.sextante.core.OutputObjectsSet outputs_<%=cid %> = alg_<%=cid %>.getOutputObjects();
es.unex.sextante.outputs.Output af_<%=cid %>_acccost_out = outputs_<%=cid %>.getOutput(es.unex.sextante.gridAnalysis.accCostCombined.AccCostCombinedAlgorithm.ACCCOST);
af_<%=cid %>_acccost_out.setOutputChannel(new es.unex.sextante.outputs.FileOutputChannel(<%=acccost_out%>));
globalMap.put("<%=cid %>_ACCCOST_OUT", <%=acccost_out%>);
//if (alg_<%=cid %>.getUserCanDefineOutputExtent()) {
// TODO : get Extent
//}
es.unex.sextante.outputs.Output af_<%=cid %>_closestpoint_out = outputs_<%=cid %>.getOutput(es.unex.sextante.gridAnalysis.accCostCombined.AccCostCombinedAlgorithm.CLOSESTPOINT);
af_<%=cid %>_closestpoint_out.setOutputChannel(new es.unex.sextante.outputs.FileOutputChannel(<%=closestpoint_out%>));
globalMap.put("<%=cid %>_CLOSESTPOINT_OUT", <%=closestpoint_out%>);
//if (alg_<%=cid %>.getUserCanDefineOutputExtent()) {
// TODO : get Extent
//}


es.unex.sextante.geotools.GTOutputFactory outputFactory_<%=cid %> = new es.unex.sextante.geotools.GTOutputFactory();
try {
alg_<%=cid %>.execute(null, outputFactory_<%=cid %>);
} catch (Exception e) {
  e.printStackTrace();
}


