<%@ jet
imports="
    org.talend.core.model.process.INode
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
    java.util.Map
    java.util.ArrayList
    org.talend.commons.utils.StringUtils
    org.talend.core.model.process.IConnection
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.process.EConnectionType
    org.talend.core.model.metadata.types.JavaTypesManager
"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

String demand = ElementParameterParser.getValue(node, "__DEMAND__");
String fielddemand = ElementParameterParser.getValue(node, "__FIELDDEMAND__");
String offer = ElementParameterParser.getValue(node, "__OFFER__");
String candidates = ElementParameterParser.getValue(node, "__CANDIDATES__");
String dist = ElementParameterParser.getValue(node, "__DIST__");
String method = ElementParameterParser.getValue(node, "__METHOD__");
String newlocations = ElementParameterParser.getValue(node, "__NEWLOCATIONS__");
String maxdist = ElementParameterParser.getValue(node, "__MAXDIST__");
String spider_out = ElementParameterParser.getValue(node, "__SPIDER_OUT__");

%>

<%
if (!"\"\"".equals(demand)) {
%>
// Create a vector layer
java.io.File file_<%=cid %>_demand = new java.io.File( <%=demand %> );
java.util.Map connect_<%=cid %>_demand = new java.util.HashMap();
connect_<%=cid %>_demand.put("url", file_<%=cid %>_demand.toURL() );
org.geotools.data.DataStore ds_<%=cid %>_demand = org.geotools.data.DataStoreFinder.getDataStore( connect_<%=cid %>_demand );
es.unex.sextante.geotools.GTVectorLayer layer_<%=cid %>_demand = es.unex.sextante.geotools.GTVectorLayer.createLayer(ds_<%=cid %>_demand, ds_<%=cid %>_demand.getTypeNames()[0]);
<%
}
%>
<%
if (!"\"\"".equals(fielddemand)) {
%>
<%
}
%>
<%
if (!"\"\"".equals(offer)) {
%>
// Create a vector layer
java.io.File file_<%=cid %>_offer = new java.io.File( <%=offer %> );
java.util.Map connect_<%=cid %>_offer = new java.util.HashMap();
connect_<%=cid %>_offer.put("url", file_<%=cid %>_offer.toURL() );
org.geotools.data.DataStore ds_<%=cid %>_offer = org.geotools.data.DataStoreFinder.getDataStore( connect_<%=cid %>_offer );
es.unex.sextante.geotools.GTVectorLayer layer_<%=cid %>_offer = es.unex.sextante.geotools.GTVectorLayer.createLayer(ds_<%=cid %>_offer, ds_<%=cid %>_offer.getTypeNames()[0]);
<%
}
%>
<%
if (!"\"\"".equals(candidates)) {
%>
// Create a vector layer
java.io.File file_<%=cid %>_candidates = new java.io.File( <%=candidates %> );
java.util.Map connect_<%=cid %>_candidates = new java.util.HashMap();
connect_<%=cid %>_candidates.put("url", file_<%=cid %>_candidates.toURL() );
org.geotools.data.DataStore ds_<%=cid %>_candidates = org.geotools.data.DataStoreFinder.getDataStore( connect_<%=cid %>_candidates );
es.unex.sextante.geotools.GTVectorLayer layer_<%=cid %>_candidates = es.unex.sextante.geotools.GTVectorLayer.createLayer(ds_<%=cid %>_candidates, ds_<%=cid %>_candidates.getTypeNames()[0]);
<%
}
%>
<%
if (!"\"\"".equals(dist)) {
%>
<%
}
%>
<%
if (!"\"\"".equals(method)) {
%>
<%
}
%>
<%
if (!"\"\"".equals(newlocations)) {
%>
<%
}
%>
<%
if (!"\"\"".equals(maxdist)) {
%>
<%
}
%>


es.unex.sextante.locate.locateAllocate.LocateAllocateAlgorithm alg_<%=cid %> = new es.unex.sextante.locate.locateAllocate.LocateAllocateAlgorithm();


es.unex.sextante.core.ParametersSet params_<%=cid %> = alg_<%=cid %>.getParameters();
<%
if (!"\"\"".equals(demand)) {
%>
params_<%=cid %>.getParameter(es.unex.sextante.locate.locateAllocate.LocateAllocateAlgorithm.DEMAND).setParameterValue(layer_<%=cid %>_demand);
<%
}
%>
<%
if (!"\"\"".equals(fielddemand)) {
%>
params_<%=cid %>.getParameter("FIELDDEMAND").setParameterValue(<%=fielddemand %>);
<%
}
%>
<%
if (!"\"\"".equals(offer)) {
%>
params_<%=cid %>.getParameter(es.unex.sextante.locate.locateAllocate.LocateAllocateAlgorithm.OFFER).setParameterValue(layer_<%=cid %>_offer);
<%
}
%>
<%
if (!"\"\"".equals(candidates)) {
%>
params_<%=cid %>.getParameter(es.unex.sextante.locate.locateAllocate.LocateAllocateAlgorithm.CANDIDATES).setParameterValue(layer_<%=cid %>_candidates);
<%
}
%>
<%
if (!"\"\"".equals(dist)) {
%>
params_<%=cid %>.getParameter("DIST").setParameterValue(<%=dist %>);
<%
}
%>
<%
if (!"\"\"".equals(method)) {
%>
params_<%=cid %>.getParameter("METHOD").setParameterValue(<%=method %>);
<%
}
%>
<%
if (!"\"\"".equals(newlocations)) {
%>
params_<%=cid %>.getParameter("NEWLOCATIONS").setParameterValue(Double.valueOf(<%=newlocations%>));
<%
}
%>
<%
if (!"\"\"".equals(maxdist)) {
%>
params_<%=cid %>.getParameter("MAXDIST").setParameterValue(Double.valueOf(<%=maxdist%>));
<%
}
%>


// Output objects ...
es.unex.sextante.core.OutputObjectsSet outputs_<%=cid %> = alg_<%=cid %>.getOutputObjects();
es.unex.sextante.outputs.Output af_<%=cid %>_spider_out = outputs_<%=cid %>.getOutput(es.unex.sextante.locate.locateAllocate.LocateAllocateAlgorithm.SPIDER);
af_<%=cid %>_spider_out.setOutputChannel(new es.unex.sextante.outputs.FileOutputChannel(<%=spider_out%>));
globalMap.put("<%=cid %>_SPIDER_OUT", <%=spider_out%>);
//if (alg_<%=cid %>.getUserCanDefineOutputExtent()) {
// TODO : get Extent
//}
// TODO Unsupported type: RESULT[OutputText]


es.unex.sextante.geotools.GTOutputFactory outputFactory_<%=cid %> = new es.unex.sextante.geotools.GTOutputFactory();
try {
alg_<%=cid %>.execute(null, outputFactory_<%=cid %>);
} catch (Exception e) {
  e.printStackTrace();
}


