<%@ jet
imports="
    org.talend.core.model.process.INode
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
    java.util.Map
    java.util.ArrayList
    org.talend.commons.utils.StringUtils
    org.talend.core.model.process.IConnection
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.process.EConnectionType
    org.talend.core.model.metadata.types.JavaTypesManager
"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

String layer = ElementParameterParser.getValue(node, "__LAYER__");
List<Map<String, String>> grids = (List<Map<String, String>>) ElementParameterParser.getObjectValue(node, "__GRIDS__");
String interpolate = ElementParameterParser.getValue(node, "__INTERPOLATE__");
String result_out = ElementParameterParser.getValue(node, "__RESULT_OUT__");

%>

<%
if (!"\"\"".equals(layer)) {
%>
// Create a vector layer
java.io.File file_<%=cid %>_layer = new java.io.File( <%=layer %> );
java.util.Map connect_<%=cid %>_layer = new java.util.HashMap();
connect_<%=cid %>_layer.put("url", file_<%=cid %>_layer.toURL() );
org.geotools.data.DataStore ds_<%=cid %>_layer = org.geotools.data.DataStoreFinder.getDataStore( connect_<%=cid %>_layer );
es.unex.sextante.geotools.GTVectorLayer layer_<%=cid %>_layer = es.unex.sextante.geotools.GTVectorLayer.createLayer(ds_<%=cid %>_layer, ds_<%=cid %>_layer.getTypeNames()[0]);
<%
}
%>
<%
if (!"\"\"".equals(grids)) {
%>
java.util.ArrayList<Object> grids_<%=cid %> = new java.util.ArrayList<Object>();
<%
for (int i=0; i<grids.size(); i++) {
  Map<String, String> current = grids.get(i);
  String currentfile = current.get("GRIDS");
%>
// TODO
grids_<%=cid %>.add(layer_<%=cid %>_grids_current<%=i %>);

<%
}
%>
<%
}
%>
<%
if (!"\"\"".equals(interpolate)) {
%>
<%
}
%>


es.unex.sextante.vectorTools.extendPointsLayerWithGrids.ExtendPointsLayerWithGridsAlgorithm alg_<%=cid %> = new es.unex.sextante.vectorTools.extendPointsLayerWithGrids.ExtendPointsLayerWithGridsAlgorithm();


es.unex.sextante.core.ParametersSet params_<%=cid %> = alg_<%=cid %>.getParameters();
<%
if (!"\"\"".equals(layer)) {
%>
params_<%=cid %>.getParameter(es.unex.sextante.vectorTools.extendPointsLayerWithGrids.ExtendPointsLayerWithGridsAlgorithm.LAYER).setParameterValue(layer_<%=cid %>_layer);
<%
}
%>
<%
if (!"\"\"".equals(grids)) {
%>
params_<%=cid %>.getParameter("GRIDS").setParameterValue(grids_<%=cid %>);
<%
}
%>
<%
if (!"\"\"".equals(interpolate)) {
%>
params_<%=cid %>.getParameter("INTERPOLATE").setParameterValue(<%=interpolate %>);
<%
}
%>


// Output objects ...
es.unex.sextante.core.OutputObjectsSet outputs_<%=cid %> = alg_<%=cid %>.getOutputObjects();
es.unex.sextante.outputs.Output af_<%=cid %>_result_out = outputs_<%=cid %>.getOutput(es.unex.sextante.vectorTools.extendPointsLayerWithGrids.ExtendPointsLayerWithGridsAlgorithm.RESULT);
af_<%=cid %>_result_out.setOutputChannel(new es.unex.sextante.outputs.FileOutputChannel(<%=result_out%>));
globalMap.put("<%=cid %>_RESULT_OUT", <%=result_out%>);
//if (alg_<%=cid %>.getUserCanDefineOutputExtent()) {
// TODO : get Extent
//}


es.unex.sextante.geotools.GTOutputFactory outputFactory_<%=cid %> = new es.unex.sextante.geotools.GTOutputFactory();
try {
alg_<%=cid %>.execute(null, outputFactory_<%=cid %>);
} catch (Exception e) {
  e.printStackTrace();
}


